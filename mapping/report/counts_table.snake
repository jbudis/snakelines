include: config['snake_dir'] + '/mapping/postprocess/bam_index.snake'

import os
import pandas as pd
from io import StringIO
import subprocess
import numpy as np

def bam_files(wildcards):
      return expand('{bamdir}/{sample}.bam',
                     bamdir=wildcards.bamdir, sample=pipeline.sample)

def bai_files(wildcards):
      return expand('{bamdir}/{sample}.bam.bai',
                     bamdir=wildcards.bamdir, sample=pipeline.sample)

rule custom_counts_table_report:
    input:
        bams = bam_files,
        bais = bai_files
    output:
        counts = '{bamdir}/counts/counts.tsv',
        ratios = '{bamdir}/counts/ratios.tsv'
    run:
        def extract_sid(bam):
            return os.path.basename(bam)[:-4]

        def extract_counts(bam):
            task = subprocess.Popen("samtools idxstats {bam}".format(bam=bam), shell=True,  stdout=subprocess.PIPE)
            data = task.stdout.read()
            counts = pd.read_csv(StringIO(data.decode('utf-8')), sep='\t', header=None, index_col=0)
            counts.index = counts.index.str.replace('*', 'Unmapped')
            counts = counts.set_value(col=2, index='Unmapped', value=counts.loc['Unmapped'][3])
            return counts[2]

        bams = sorted(input.bams)
        sids = list(map(extract_sid, bams))
        sid_counts = list(map(extract_counts, bams))

        counts = pd.DataFrame(sid_counts, index=sids)
        tcounts = counts.transpose()
        tcounts['total'] = tcounts.apply(np.sum, axis=1)
        tcounts = tcounts[tcounts.total > 0]
        tcounts.sort_values('total', inplace=True, ascending=False)
        counts = tcounts.transpose()
        counts.to_csv(output.counts, sep='\t')

        ratios = (tcounts / tcounts.apply(np.sum)).transpose()
        ratios.fillna(0, inplace=True)
        ratios.to_csv(output.ratios, sep='\t')