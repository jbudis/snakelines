import shutil
import os

configfile: srcdir('config.yaml')

pipeline = glob_wildcards('reads/original/{sample,%s}_R1.fastq.gz' % config['sample_pattern'])
report_dir = 'report/{}'.format(config['report_dir'])

include: config['snake_dir'] + '/preprocess/report/fastqc.snake'
include: config['snake_dir'] + '/preprocess/trim_reads/trimmomatic.snake'
include: config['snake_dir'] + '/mapping/mappers/bowtie2.snake'
include: config['snake_dir'] + '/mapping/postprocess/bam_index.snake'
include: config['snake_dir'] + '/mapping/report/qualimap.snake'
include: config['snake_dir'] + '/mapping/report/counts_table.snake'
include: config['snake_dir'] + '/mapping/report/krona.snake'
include: config['snake_dir'] + '/metagenomics/report/tsv_summary.snake'
include: config['snake_dir'] + '/metagenomics/report/krona.snake'

reference   = config['mapping']['reference']

generate_krona = config.get('report', {}).get('krona', False)
tax_levels     = config.get('report', {}).get('barplot', {}).get('tax_levels', [])
count_types    = config.get('report', {}).get('barplot', {}).get('count_types', [])

rule process:
    input:
        # Trimming and quality reports
        'reads/original/stats/summary.html',
        'reads/trimmed/stats/summary.html',

        # Mapped reads
        expand('bowtie2/{reference}/{sample}.bam',
                reference=reference, sample=pipeline.sample),
        expand('bowtie2/{reference}/{sample}.bam.bai',
                reference=reference, sample=pipeline.sample),

        # Mapping quality summaries
        qualimaps = expand('bowtie2/{reference}/stats-wgs/{sample}/report.pdf',
                            reference=reference, sample=pipeline.sample),

        # Graphical summary reports
        barplots = expand('bowtie2/{reference}/report/figures/{tax_level}.{count_type}.png',
                           reference=reference, tax_level=tax_levels, count_type=count_types),

        krona = 'bowtie2/{reference}/report/krona/krona.html'.format(reference=reference) if generate_krona else [],

        # Tabular summary reports
        map_summary = 'bowtie2/{reference}/stats-wgs/summary.tsv'.format(reference=reference),
        mapped_reads_abs = 'bowtie2/{reference}/counts/mapping.counts.tsv'.format(reference=reference),
        mapped_reads_rel = 'bowtie2/{reference}/counts/mapping.ratios.tsv'.format(reference=reference),

    output:
        qualimaps        = expand('{report_dir}/{reference}/{sample}/mapping-report.pdf',
                                   report_dir=report_dir, reference=reference, sample=pipeline.sample),

        barplots         = expand('{report_dir}/{reference}/{tax_level}.{count_type}.png',
                                   report_dir=report_dir, reference=reference, tax_level=tax_levels, count_type=count_types),

        krona            = '{report_dir}/{reference}/krona.html'.format(report_dir=report_dir, reference=reference) if generate_krona else [],

        map_summary      = '{report_dir}/{reference}/summary.tsv'.format(report_dir=report_dir, reference=reference),
        mapped_reads_abs = '{report_dir}/{reference}/mapping.counts.tsv'.format(report_dir=report_dir, reference=reference),
        mapped_reads_rel = '{report_dir}/{reference}/mapping.ratios.tsv'.format(report_dir=report_dir, reference=reference),

    run:
        for in_file, out_file in zip(input.qualimaps, output.qualimaps):
            shutil.copy(in_file, out_file)

        for in_file, out_file in zip(input.barplots, output.barplots):
            shutil.copy(in_file, out_file)

        shutil.copy(input.map_summary, output.map_summary)
        shutil.copy(input.mapped_reads_abs, output.mapped_reads_abs)
        shutil.copy(input.mapped_reads_rel, output.mapped_reads_rel)

        if generate_krona:
            shutil.copy(input.krona, output.krona)
