include: srcdir('indices/bowtie2_index.snake')

only_concordant = config['mapping']['only_concordant'] if 'only_concordant' in config['mapping']  else False
only_concordant_params = '--no-mixed --no-discordant --no-unal' if only_concordant else ''

rule bowtie2_map_reads:
    input:
        r1 = 'reads/%s/{sample}_R1.fastq.gz' % config['mapping']['read_type'],
        r2 = 'reads/%s/{sample}_R2.fastq.gz' % config['mapping']['read_type'],
        index = 'reference/{reference}/bowtie2_index/{reference}.1.bt2',
        reffasta = 'reference/{reference}/{reference}.fa'
    output:
        bam = 'bowtie2/{reference}/%s/{sample}.bam' % config['mapping']['read_type']
    log:
        'bowtie2/{reference}/%s/log/{sample}.map' % config['mapping']['read_type']
    params:
        index = 'reference/{reference}/bowtie2_index/{reference}',
        tmpdir = 'bowtie2/{reference}/%s/tmp/' % config['mapping']['read_type'],
        additional = config['mapping']['params'] if 'params' in config['mapping'] else '',
        regions = "" if 'regions' not in config['mapping'] else "-L reference/{reference}/annotation/%s/regions.bed" % config['mapping']['regions'],
        min_map_quality = config['mapping']['min_map_quality'] if 'min_map_quality' in config['mapping'] else 0,
        only_concordant_params = only_concordant_params
    benchmark:
        'bowtie2/{reference}/%s/benchmark/{sample}.txt' % config['mapping']['read_type']
    threads:
        int(config['threads'])
    shell:
        '''
        set +o pipefail
        hostname > {log}.host;

        bowtie2 \
            -x {params.index} \
            -1 {input.r1} \
            -2 {input.r2} \
            {params.only_concordant_params} \
            --threads {threads} \
            {params.additional} -t \
        2> {log} \
        | samtools view \
            -b \
            -q {params.min_map_quality} \
            --reference {input.reffasta} \
            --threads {threads} \
            {params.regions} \
            - \
        | samtools sort \
            --threads {threads} \
            -o {output.bam} \
            -T {params.tmpdir} \
            -m 5G \
            - \
        '''

rule bowtie2_remap_reads_to_assembly:
    input:
        r1 = 'reads/%s/{sample}_R1.fastq.gz' % config['mapping']['read_type'],
        r2 = 'reads/%s/{sample}_R2.fastq.gz' % config['mapping']['read_type'],
        index = '{fapath}/{sample}/bowtie2_index/{contigs}.1.bt2',
        fasta = '{fapath}/{sample}/{contigs}.fa'
    output:
        bam = '{fapath}/{sample}/mapping/{contigs}.bam'
    log:
        '{fapath}/{sample}/mapping/log/{sample}.map'
    params:
        index = '{fapath}/{sample}/bowtie2_index/{contigs}',
        tmpdir = '{fapath}/{sample}/tmp/',
        additional = config['mapping']['params'] if 'params' in config['mapping'] else ''
    threads:
        int(config['threads'])
    shell:
        '''
        bowtie2 \
            -x {params.index} \
            -1 {input.r1} \
            -2 {input.r2} \
            --threads {threads} \
            {params.additional} -t \
        2> {log} \
        | samtools view \
            -b \
            --threads {threads} \
            - \
        | samtools sort \
            --threads {threads} \
            -o {output.bam} \
            -T {params.tmpdir} \
            -m 5G \
            - \
        '''
