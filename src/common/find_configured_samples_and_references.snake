# Filter samples according to the user configuration
sample_pattern = config.get('sample_pattern', '.*')
wildcards = glob_wildcards('reads/original/{sample, %s}_R1.fastq.gz' % sample_pattern)
assert len(wildcards.sample) > 0, 'No samples in reads/original/ match configured pattern {}'.format(sample_pattern)

class SampleReference:
    def __init__(self, sample, reference):
        self.sample = sample
        self.reference = reference

class Pipeline:
    def __init__(self, sample, sample_reference):
        self.sample = sample
        self.sample_reference = sample_reference

pipeline = Pipeline(sample=wildcards.sample, sample_reference=[SampleReference('example', 'mhv')])
