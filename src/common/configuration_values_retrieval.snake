
def extract_from_config(items, default_value):
    '''
    Load items from the configuration file based on series of keys. If some key is not found in hierarchy,
    return default value specified as the parameter.

    :param items: list str: series of keys to hierarchically find item in the configuration file
    :param default_value: value to return if the series of keys are not present in the configuration
    '''
    subconfig = config
    for item in items:
        if item not in subconfig:
            return default_value
        subconfig = subconfig[item]
    return subconfig


# TODO: This should work for other types, such as mapping as well
def configured_temp(read_file):
    '''
    Choose if Fastq file should be marker by snakemake temporary flag temp() based on configuration

    :param read_file: output read file of a read preprocess rule
    '''
    items = read_file.split('/')
    assert items[0] == 'reads' and len(items) == 3, \
           'Method can be used only for read files in reads/{preprocess}/ directory, provided {}'.format(read_file)

    read_type = items[1]
    temporary = extract_from_config(['reads', 'preprocess', read_type, 'temporary'], False)
    return temp(read_file) if temporary else read_file