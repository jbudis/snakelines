reference:
    index:
        dict:
            output:
                index: protected(expand('reference/{sr.reference}/{sr.reference}.dict', sr=pipeline.sample_references))
        fai:
            output:
                index: protected(expand('reference/{sr.reference}/{sr.reference}.fai', sr=pipeline.sample_references))

reads:

    preprocess:
        original:
            output:
                reads: expand('reads/original/{sample}_R{orientation}.fastq.gz', sample=pipeline.samples, orientation=[1,2])
        trimmed:
            output:
                reads: expand('reads/trimmed/{sample}_R{orientation}.fastq.gz', sample=pipeline.samples, orientation=[1,2])
        decontaminated:
            output:
                reads: expand('reads/decontaminated/{sample}_R{orientation}.fastq.gz', sample=pipeline.samples, orientation=[1,2])
        deduplicated:
            output:
                reads: expand('reads/deduplicated/{sample}_R{orientation}.fastq.gz', sample=pipeline.samples, orientation=[1,2])
        joined:
            output:
                reads: expand('reads/joined/{sample}_R{orientation}.fastq.gz', sample=pipeline.samples, orientation=[1,2,'M'])
        subsampled:
            output:
                reads: expand('reads/subsampled/{sample}_R{orientation}.fastq.gz', sample=pipeline.samples, orientation=[1,2])

    report:
        quality_report:
            output:
                fastqcs:
                    from: expand('reads/{read_type}/stats/{sample}_R{orientation}_fastqc.html', read_type=read_types_with_fastqc_report, sample=pipeline.samples, orientation=[1,2])
                    to: expand('{report_dir}/read_quality_report/{read_type}/{sample}_R{orientation}_fastqc.html', report_dir=config['report_dir'],read_type=read_types_with_fastqc_report, sample=pipeline.samples, orientation=[1,2])
                reports:
                    from: expand('reads/{read_type}/stats/summary.html', read_type=read_types_with_fastqc_report)
                    to: expand('{report_dir}/read_quality_report/{read_type}/index.html', report_dir=config['report_dir'], read_type=read_types_with_fastqc_report)

mapping:
    mapper:
        output:
            alignments: expand('mapping/{sr.reference}/original/{sr.sample}.bam', sr=pipeline.sample_references)
        depends:
            - reads/preprocess
            - reads/report/quality_report
    index:
        output:
            bam_indices: expand('mapping/{sr.reference}/{map_type}/{sr.sample}.bam.bai', sr=pipeline.sample_references, map_type=pipeline.postprocessed_map_type)
    postprocess:
        original:
            output:
                original: expand('mapping/{sr.reference}/original/{sr.sample}.bam', sr=pipeline.sample_references)
        sorted:
            output:
                sorted: expand('mapping/{sr.reference}/sorted/{sr.sample}.bam', sr=pipeline.sample_references)
        deduplicated:
            output:
                deduplicated: expand('mapping/{sr.reference}/deduplicated/{sr.sample}.bam', sr=pipeline.sample_references)
    report:
        quality_report:
            output:
                quality_reports:
                    from: expand('mapping/{sr.reference}/{map_type}/stats-wgs/samples/{sr.sample}/report.pdf', sr=pipeline.sample_references, map_type=pipeline.postprocessed_map_type)
                    to: expand('{report_dir}/{sr.reference}/samples/{sr.sample}/mapping_quality.pdf', report_dir=config['report_dir'], sr=pipeline.sample_references)
                summary_report:
                    from: expand('mapping/{reference}/{map_type}/stats-wgs/summary/report.pdf', reference=multisample_references, map_type=pipeline.postprocessed_map_type)
                    to: expand('{report_dir}/{reference}/summary/mapping_quality.pdf', report_dir=config['report_dir'], reference=multisample_references)
            depends:
                - mapping/mapper
        methylation:
            output:
                methylation_reports:
                    from: expand('mapping/{sr.reference}/{map_type}/bismark/{sr.sample}.html', sr=pipeline.sample_references, map_type='original')
                    to: expand('{report_dir}/{sr.reference}/samples/{sr.sample}/methylation.html', report_dir=config['report_dir'], sr=pipeline.sample_references)
            depends:
                - mapping/mapper

variant:
    caller:
        output:
            variants:
                from: expand('variant/{sr.reference}-wgs/original/{sr.sample}.vcf', sr=pipeline.sample_references, map_type=pipeline.postprocessed_map_type)
                to: expand('{report_dir}/{sr.reference}/samples/{sr.sample}/variants.vcf', report_dir=config['report_dir'], sr=pipeline.sample_references)
        depends:
            - reads/preprocess
            - reads/report/quality_report
            - mapping/mapper
    report:
        calling:
            output: []
            depends:
                - reads/preprocess
                - reads/report/quality_report
                - mapping/mapper
        summary:
            output:
                report:
                    from: expand('variant/{sr.reference}-wgs/original/report/{sr.sample}.pdf', sr=pipeline.sample_references)
                    to: expand('{report_dir}/{sr.reference}/samples/{sr.sample}/summary.pdf', report_dir=config['report_dir'], sr=pipeline.sample_references)
            depends:
                - reads/preprocess
                - reads/report/quality_report
                - mapping/mapper

classification:
    read_based:
        output: []
        depends:
            - reads/preprocess
            - reads/report
    contig_based:
        output: []
        depends:
            - reads/preprocess
            - reads/report
    viral:
        identification:
            output: []
            depends:
                - reads/preprocess
                - reads/report
    transcripts:
        output:
            classification: expand('classification/{reference}/report/krona/individual/{sample}.krn', reference=pipeline.references, sample=pipeline.samples)
        depends:
            - reads/preprocess
            - reads/report
    differential_analysis:
        output:
            analysis:
                from: expand('classification/{reference}/report/comparison/differential_analysis.tsv', reference=pipeline.references)
                to: expand('{report_dir}/{reference}/comparison/differential_analysis.tsv', report_dir=config['report_dir'], reference=pipeline.references)
        filter_significant:
            output:
                analysis:
                    from: expand('classification/{reference}/report/comparison/significant.tsv', reference=pipeline.references)
                    to: expand('{report_dir}/{reference}/comparison/significant.tsv', report_dir=config['report_dir'], reference=pipeline.references)
    report:
        taxonomic_counts:
            barplot:
                output:
                    barplots:
                        from: expand('classification/{reference}/report/figures/{tax_level}.{type}.{format}', reference=pipeline.references, tax_level=tax_levels_barplot, type=['counts', 'ratios'], format=barplot_formats)
                        to: expand('{report_dir}/{reference}/figures/{tax_level}.{type}.{format}', report_dir=config['report_dir'], reference=pipeline.references, tax_level=tax_levels_barplot, type=['counts', 'ratios'], format=barplot_formats)
                depends:
                    - classification/read_based
            pieplot:
                output:
                    krona_html:
                        from: expand('classification/{reference}/report/krona/taxonomic_counts.html', reference=pipeline.references)
                        to: expand('{report_dir}/{reference}/krona/taxonomic_counts.html', report_dir=config['report_dir'], reference=pipeline.references)
                depends:
                    - classification/read_based
            count_table:
                output:
                    tables:
                        from: expand('classification/{reference}/report/tsv/{tax_level}.{type}.tsv', reference=pipeline.references, tax_level=tax_levels_count_table, type=['counts', 'ratios'])
                        to: expand('{report_dir}/{reference}/tsv/{tax_level}.{type}.tsv', report_dir=config['report_dir'], reference=pipeline.references, tax_level=tax_levels_count_table, type=['counts', 'ratios'])
                depends:
                    - classification/read_based
        summary:
            output:
                summary_html:
                    from: expand('assembly/{sample}/annotation/contigs/summary.html', sample=pipeline.samples)
                    to: expand('{report_dir}/{sample}/contig_annotations.html', sample=pipeline.samples, report_dir=config['report_dir'])
                contigs:
                    from: expand('assembly/{sample}/annotation/contigs/sequences/', sample=pipeline.samples)
                    to: expand('{report_dir}/{sample}/sequences/', sample=pipeline.samples, report_dir=config['report_dir'])
            depends:
                - classification/contig_based
        transcripts:
            count_table:
                output:
                    tsv_table:
                        from: expand(['classification/{reference}/report/tsv/summary.xlsx','classification/{reference}/report/tsv/summary.tsv'], reference=pipeline.references)
                        to: expand(['{report_dir}/{reference}/tsv/summary.xlsx','{report_dir}/{reference}/tsv/summary.tsv'], report_dir=config['report_dir'], reference=pipeline.references)
            pca:
                output:
                    images:
                        from: expand(['classification/{reference}/report/comparison/pca.svg','classification/{reference}/report/comparison/pca.png'], reference=pipeline.references)
                        to: expand(['{report_dir}/{reference}/comparison/pca.svg','{report_dir}/{reference}/comparison/pca.png'], report_dir=config['report_dir'], reference=pipeline.references)
            depends:
                - classification/samples
assembly:
    assembler:
        output:
            contigs: expand('assembly/{sample}/contigs.fa', sample=pipeline.samples)
        depends:
            - reads/preprocess
            - reads/report
    report:
        quality_report:
            output:
                quality_reports:
                    from: expand('assembly/{sample}/quality_report/report.pdf', sample=pipeline.samples)
                    to: expand('{report_dir}/assembly/{sample}/report.pdf', report_dir=config['report_dir'], sample=pipeline.samples)
        assembly_graph:
            output:
                overlap_graphs:
                    from: expand('assembly/{sample}/assembly_graph.svg', sample=pipeline.samples)
                    to: expand('{report_dir}/assembly/{sample}/contigs.svg', report_dir=config['report_dir'], sample=pipeline.samples)

qiime:
    alignment:
        output:
            alignment: expand('reads/qiime/{name}-rep-aligned-seqs{file_suffix}.qza', name=qiime_reference, file_suffix=qiime_file_suffix)
            masked_alignment: expand('reads/qiime/{name}-rep-masked-aligned-seqs{file_suffix}.qza', name=qiime_reference, file_suffix=qiime_file_suffix)
            unrooted_tree: expand('reads/qiime/{name}-unrooted-tree{file_suffix}.qza', name=qiime_reference, file_suffix=qiime_file_suffix)
            rooted_tree: expand('reads/qiime/{name}-rooted-tree{file_suffix}.qza', name=qiime_reference, file_suffix=qiime_file_suffix)
    analysis:
        core_metrics:
            output:
                rarefield_table : expand('reads/qiime/{name}-core-metrics-results/rarefied_table.qza', name=qiime_reference)
                vector          : expand('reads/qiime/{name}-core-metrics-results/{alpha_types}_vector.qza', name=qiime_reference, alpha_types=qiime_alpha_types)
                distance_matrix : expand('reads/qiime/{name}-core-metrics-results/{beta_types}_distance_matrix.qza', name=qiime_reference, beta_types=qiime_beta_types)
                emperor_plots   : expand('reads/qiime/{name}-core-metrics-results/{emperor_types}_emperor.qzv', name=qiime_reference, emperor_types=qiime_emperor_types)
                pcoa_results    : expand('reads/qiime/{name}-core-metrics-results/{beta_types}_pcoa_results.qza', name=qiime_reference, beta_types=qiime_beta_types)
        diversity:
            alpha:
                output:
                    qzv         : expand('reads/qiime/{name}-core-metrics-results/alpha/{type}_group_significance.qzv', name=qiime_reference, type=qiime_alpha_types)
            beta:
                output:
                    qzv         : expand('reads/qiime/{name}-core-metrics-results/beta/{type}_{column}_significance.qzv', name=qiime_reference, type=qiime_beta_types, column=config['qiime_beta_significance_columns'])
            custom_axes:
                output:
                    qzv         : expand('reads/qiime/{name}-core-metrics-results/custom_axes/{type}_emperor_{column}.qzv', name=qiime_reference, type=qiime_beta_types, column=config['qiime_custom_axes_columns'])
        taxonomy:
            classify:
                output:
                    taxonomy    : expand('reads/qiime/{name}-taxonomy{file_suffix}.qza', name=qiime_reference, file_suffix=qiime_file_suffix)
            index:
                output:
                    classifier  : expand('reference/{reference}/qiime2_index/{reference}-classifier.qza', reference=qiime_reference)

    preprocess:
        chimeras:
            filter:
                output      :
                    table   : expand('reads/qiime/{name}-table.qza', name=qiime_reference)
                    rep_seqs: expand('reads/qiime/{name}-rep-seqs.qza', name=qiime_reference)
            prepare:
                output      :
                    qza     : expand('reads/qiime/{name}-uchime-dn-out/{type}.qza', name=qiime_reference, type=qiime_chimeras_list)
        clustered:
            output:
                table       : expand('reads/qiime/{name}-table-dn-{similarity}.qza', name=qiime_reference, similarity=config['qiime']['preprocess']['clustered']['similarity'])
                rep_seqs    : expand('reads/qiime/{name}-rep-seqs-dn-{similarity}.qza', name=qiime_reference, similarity=config['qiime']['preprocess']['clustered']['similarity'])
        dereplicated:
            output:
                table       : expand('reads/qiime/{name}-table.qza', name=qiime_reference)
                rep_seqs    : expand('reads/qiime/{name}-rep-seqs.qza', name=qiime_reference)
        imported:
            output:
                qza         : expand('reads/qiime/{name}-imported.qza', name=qiime_reference)
        manifest:
            output:
                manifest    : expand('reads/qiime/{name}.manifest', name=qiime_reference)
        metadata:
            output:
                metadata    : expand('description/{name}-sample-metadata.tsv', name=qiime_reference)
    report:
        prepare:
            cluster_feature_table:
                output:
                    qzv: expand('reads/qiime/{name}-table-dn-{perc_identity}.qzv', name=qiime_reference, perc_identity=config['qiime']['preprocess']['clustered']['similarity'])
            cluster_rep_seqs:
                output:
                    qzv: expand('reads/qiime/{name}-rep-seqs-dn-{perc_identity}.qzv', name=qiime_reference, perc_identity=config['qiime']['preprocess']['clustered']['similarity'])
            quality_report:
                output:
                    qzv: expand('reads/qiime/{name}-imported.qzv', name=qiime_reference)
            taxonomy:
                barplot:
                    output:
                        qzv: expand('reads/qiime/{name}-taxa-barplots{file_suffix}.qzv', name=qiime_reference, file_suffix=qiime_file_suffix)
                tabulate:
                    output:
                        qzv: expand('reads/qiime/{name}-taxonomy{file_suffix}.qzv', name=qiime_reference, file_suffix=qiime_file_suffix)

        export:
            output:
                read_quality_report :
                    from:   expand('reads/qiime/{name}-imported/', name=qiime_reference)
                    to:     expand('{report}/01_read_quality_report/', report=config['report_dir'])

                out_report          :
                    from:   expand('reads/qiime/{name}-{type}-dn-{similarity}/',
                                                name=qiime_reference,
                                                type=['rep-seqs', 'table'],
                                                similarity=config['qiime']['preprocess']['clustered']['similarity'])
                    to:     expand('{report}/02_out_report/{name}-{type}-dn-{similarity}/',
                                                report=config['report_dir'],
                                                name=qiime_reference,
                                                type=['rep-seqs', 'table'],
                                                similarity=config['qiime']['preprocess']['clustered']['similarity'])

                taxonomy_report     :
                    from:   expand('reads/qiime/{name}-{type}-dn-{similarity}/',
                                                name=qiime_reference,
                                                type=['taxonomy', 'taxa-barplots'],
                                                similarity=config['qiime']['analysis']['core_metrics']['similarity'])
                    to:     expand('{report}/03_taxonomy_report/{name}-{type}-dn-{similarity}/',
                                                report=config['report_dir'],
                                                name=qiime_reference,
                                                type=['taxonomy', 'taxa-barplots'],
                                                similarity=config['qiime']['analysis']['core_metrics']['similarity'])

                alpha_group_significance_reports:
                    from:   expand('reads/qiime/{name}-core-metrics-results/alpha/{type}_group_significance/',
                                                name=qiime_reference,
                                                type=config['qiime']['analysis']['core_metrics']['alpha_types'])
                    to:     expand('{report}/04_alpha_group_significance_reports/{name}-core-metrics-results/alpha/{type}_group_significance/',
                                                report=config['report_dir'],
                                                name=qiime_reference,
                                                type=config['qiime']['analysis']['core_metrics']['alpha_types'])

                beta_group_significance_reports:
                    from:   expand('reads/qiime/{name}-core-metrics-results/beta/{type}_{column}_significance/',
                                                name=qiime_reference,
                                                type=['bray_curtis', 'jaccard', 'unweighted_unifrac', 'weighted_unifrac'],
                                                column=config['qiime_beta_significance_columns'])
                    to:     expand('{report}/05_beta_group_significance_reports/{name}-core-metrics-results/beta/{type}_{column}_significance/',
                                                report=config['report_dir'],
                                                name=qiime_reference,
                                                type=['bray_curtis', 'jaccard', 'unweighted_unifrac', 'weighted_unifrac'],
                                                column=config['qiime_beta_significance_columns'])

                emperor_plot_reports:
                    from:   expand('reads/qiime/{name}-core-metrics-results/{type}_emperor/',
                                                name=qiime_reference,
                                                type=config['qiime']['analysis']['core_metrics']['emperor_types'])
                    to:     expand('{report}/06_emperor_plot_reports/{name}-core-metrics-results/{type}_emperor/',
                                                report=config['report_dir'],
                                                name=qiime_reference,
                                                type=config['qiime']['analysis']['core_metrics']['emperor_types'])

                custom_axes_reports:
                    from:   expand('reads/qiime/{name}-core-metrics-results/custom_axes/{type}_emperor_{column}/',
                                                name=qiime_reference,
                                                type=qiime_beta_types,
                                                column=config['qiime_custom_axes_columns'])
                    to:     expand('{report}/07_custom_axes_reports/{type}_emperor_{column}/',
                                                report=config['report_dir'],
                                                type=qiime_beta_types,
                                                column=config['qiime_custom_axes_columns'])



