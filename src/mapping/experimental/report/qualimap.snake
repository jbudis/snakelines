include: config['snake_dir'] + '/mapping/postprocess/bam_index.snake'

import pandas as pd
import os

def qualimap_files(wildcards):
      bamdir = wildcards.bamdir if hasattr(wildcards, 'bamdir') else '%s/%s' % (wildcards.mapper, wildcards.reference)
      return expand('%s/stats-%s/{sample}/genome_results.txt' % (bamdir, wildcards.panel), \
                     sample=pipeline.samples)

rule qualimap_wgs_report:
    input:
        bam = '{bamdir}/{sample}.bam',
        bai = '{bamdir}/{sample}.bam.bai'
    output:
        html = '{bamdir}/stats-wgs/{sample}/qualimapReport.html',
        pdf  = '{bamdir}/stats-wgs/{sample}/report.pdf',
        text = '{bamdir}/stats-wgs/{sample}/genome_results.txt'
    params:
        outdir = '{bamdir}/stats-wgs/{sample}'
    threads:
        int(config['threads'])
    log:
        '{bamdir}/stats-wgs/{sample}/analysis.log'
    shell:
        '''
        qualimap bamqc \
            --java-mem-size=100G \
            -bam {input.bam} \
            --paint-chromosome-limits \
            -outdir {params.outdir} \
            -outformat PDF:HTML \
            -nt {threads} \
        > {log}
        '''

rule qualimap_panel_report:
    input:
        bam = '{mapper}/{reference}/{sample}.bam',
        bai = '{mapper}/{reference}/{sample}.bam.bai',
        bed = 'reference/{reference}/annotation/{panel}/regions.bed'
    output:
        html = '{mapper}/{reference}/stats-{panel}/{sample}/qualimapReport.html',
        pdf  = '{mapper}/{reference}/stats-{panel}/{sample}/report.pdf',
        text = '{mapper}/{reference}/stats-{panel}/{sample}/genome_results.txt'
    params:
        outdir = '{mapper}/{reference}/stats-{panel}/{sample}'
    threads:
        int(config['threads'])
    log:
        '{mapper}/{reference}/stats-{panel}/{sample}/analysis.log'
    shell:
        '''
        qualimap bamqc \
            --java-mem-size=100G \
            -bam {input.bam} \
            --feature-file {input.bed} \
            -outdir {params.outdir} \
            -outformat PDF:HTML \
            -nt {threads} \
        > {log}
        '''

rule summary_qualimap_report:
    input:
        qualimap_files
    output:
        '{bamdir}/stats-{panel}/summary.tsv'
    run:
        def percent(text):
            return '%.4f' % (float(text[text.find('(') + 1: text.rfind('%')]) / 100)

        def extract_attribute(qualimap, attribute, convert):
            with open(qualimap) as report:
                for line in report:
                    if ' = ' not in line:
                        continue
                    line = line.strip()
                    key, value = line.split(' = ')
                    if key == attribute:
                        return convert(value)

        percents = []
        for qualimap in input:
            percents.append(extract_attribute(qualimap, 'number of mapped reads', percent))

        sids = [os.path.basename(os.path.dirname(qualimap)) for qualimap in input]

        table = pd.DataFrame(index=sids)
        table['mapped'] = percents
        table.to_csv(output[0], sep='\t')