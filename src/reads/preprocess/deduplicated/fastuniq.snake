tool_config = config['reads']['preprocess']['deduplicated']

input_read_type = tool_config['input_read_type']
temporary = tool_config.get('temporary', False)

def configured_temp(outfile):
    return temp(outfile) if temporary else outfile

rule fastuniq__deduplicate_reads:
    input:
        r1 = 'reads/%s/{sample}_R1.fastq.gz' % input_read_type,
        r2 = 'reads/%s/{sample}_R2.fastq.gz' % input_read_type
    output:
        r1 = configured_temp('reads/deduplicated/{sample}_R1.fastq.gz'),
        r2 = configured_temp('reads/deduplicated/{sample}_R2.fastq.gz')
    params:
        r1_ungz = 'reads/deduplicated/{sample}.tmp_R1.fastq',
        r2_ungz = 'reads/deduplicated/{sample}.tmp_R2.fastq',
        in_file = 'reads/deduplicated/{sample}.txt',
        r1 = 'reads/deduplicated/{sample}_R1.fastq',
        r2 = 'reads/deduplicated/{sample}_R2.fastq'
    shell:
        '''
        mkdir -p 'reads/deduplicated'

        gzip -cd {input.r1} > {params.r1_ungz}
        gzip -cd {input.r2} > {params.r2_ungz}

        echo "{params.r1_ungz}\n{params.r2_ungz}" > {params.in_file}

        fastuniq \
            -i {params.in_file} \
            -o {params.r1} \
            -p {params.r2}

        gzip {params.r1}
        gzip {params.r2}

        rm {params.r1_ungz}
        rm {params.r2_ungz}
        rm {params.in_file}
        '''


    
