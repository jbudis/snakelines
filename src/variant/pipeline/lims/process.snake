shell.prefix("set +o pipefail; ")

configfile: srcdir('config.yaml')

sample = config['sample']
version = config['version']
analysis_id = sample.split('_')[-1]

pipeline = glob_wildcards('reads/original/{sample,%s}_R1.fastq.gz' % sample)

include: config['snake_dir'] + '/preprocess/report/fastqc.snake'
include: config['snake_dir'] + '/preprocess/trim_reads/trimmomatic.snake'
include: config['snake_dir'] + '/mapping/mappers/bowtie2.snake'
include: config['snake_dir'] + '/mapping/postprocess/bam_index.snake'
include: config['snake_dir'] + '/mapping/postprocess/read_group/custom.snake'
include: config['snake_dir'] + '/mapping/postprocess/deduplication/picard.snake'
include: config['snake_dir'] + '/mapping/postprocess/realignment/gatk.snake'
include: config['snake_dir'] + '/mapping/report/qualimap.snake'
include: config['snake_dir'] + '/variant/callers/vardict.snake'
include: config['snake_dir'] + '/variant/annotation/snpsift.snake'
include: config['snake_dir'] + '/variant/report/qc3.snake'

reference = config['mapping']['reference']
panel = config['variant']['panel']

rule process:
    input:
        # BAM files
        'bowtie2/{reference}/realign/{sample}.bam'.format(
                    reference=reference, sample=sample),

        # Qualimap reports
        qualimap = 'bowtie2/{reference}/stats-{panel}/{sample}/report.pdf'.format(
                     reference=reference, panel=panel, sample=sample),

        # Variant files
        vcf = 'bowtie2/{reference}/vardict-{panel}/{sample}.germline.vcf'.format(
                      reference=reference, sample=sample, panel=panel)

        '{bamdir}/stats-wgs/{sample}/report.pdf',

    output:
        # Qualimap reports
        qualimap = 'report/variant/{version}/mapping-report.pdf'.format(
                    version=version),

        vcf      = 'report/variant/{version}/variants.vcf'.format(
                    version=version),

        success_flag = 'report/variant/{version}/success.txt'.format(
                        version=version),

    shell:
        '''
        cp {input.qualimap} {output.qualimap}
        cp {input.vcf} {output.vcf}
        touch {output.success_flag}
        '''
