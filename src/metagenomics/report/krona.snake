import re
import pandas as pd
import tempfile
from collections import OrderedDict

def individual_krn_files(wildcards):
    if 'gene_pattern' in config:
        gene_file_pattern = re.compile(config['gene_pattern'][wildcards.gene])
        gene_sids = list(filter(gene_file_pattern.match, pipeline.samples))
    else:
        gene_sids = pipeline.samples

    return expand('%s/%s/report/krona/individual/{sample}.krn' % (wildcards.analysis_dir, wildcards.gene),
                  sample=gene_sids)

rule krona_individual_report:
    input:
        '{path}/report/krona/individual/{sample}.krn'
    output:
        '{path}/report/krona/individual/{sample}.html'
    log:
        '{path}/log/{sample}.krona'
    shell:
        '''
        ktImportText \
            -o {output} \
            {input} \
        > {log}
        '''

rule krona_report_from_otus:
    input:
        tax = '{path}/{sample}.tax',
        counts = '{path}/{sample}.counts.tsv'
    output:
        html = '{path}/{sample}.krona.html'
    run:
        with open(input.tax) as tax_file:
            taxes = dict(line.split('\t') for line in tax_file)

        counts = pd.read_csv(input.counts, sep='\t', index_col=0)
        sids, otus = counts.index, counts.columns

        # Store krona input taxonomies in temporary files, one file for each sample
        krn_files = OrderedDict()
        for sid, sid_counts in counts.iterrows():
            _, krn_name = tempfile.mkstemp()
            with open(krn_name, 'w') as krn:
                krn_files[sid] = krn_name
                for otu in otus:
                    otu_count = sid_counts[otu]
                    if otu_count == 0:
                        continue
                    krn.write('{count}\t{tax}\n'.format(count=otu_count, tax=taxes[otu].replace(';', '\t')))

        krns = ' '.join(['{},{}'.format(krn,sid) for sid, krn in krn_files.items()])
        command = 'ktImportText -o {output} {input}'.format(output=output.html, input=krns)
        os.system(command)
        for krn in krn_files.values():
            os.remove(krn)


rule krona_summary_report:
    input:
        individual_krn_files
    output:
        '{analysis_dir}/{gene}/report/krona/krona.html'
    log:
        out = '{analysis_dir}/{gene}/report/krona/log/krona.log',
        err = '{analysis_dir}/{gene}/report/krona/log/krona.err'
    shell:
        '''
        ktImportText \
            -o {output} \
            {input} \
         > {log.out} \
        2> {log.err}
        '''