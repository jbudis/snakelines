reference:
    index:
        dict:
            output:
                reference_index: expand('reference/{reference}/{reference}.dict',
                                        reference=pipeline.references)
        fai:
            output:
                index: expand('reference/{reference}/{reference}.fa.fai',
                                        reference=pipeline.references)

    download:
        output:
            reference: expand('reference/{reference}/{reference}.fa',
                               reference=pipeline.references)

    alignment:
        output:
            alignment: expand('reference/{reference}/alignment/{reference}.aln',
                               reference=pipeline.references)

    phylogeny:
        output:
            phylogenic_tree: expand('reference/{reference}/alignment/{reference}.aln.treefile',
                                     reference=pipeline.references)
            depends:
                - reference/alignment

    attributes:
        desc:
            output:
                    desc: expand('reference/{reference}/{reference}.desc', reference=pipeline.references) # TODO: extend this to all fasta files

    report:
        phylogenetic_tree:
            output:
                svg:
                    from: expand('reference/{reference}/alignment/{reference}.aln.treefile.svg',
                                  reference=pipeline.references)

                    to:   expand('{report_dir}/_reference/{reference}/phylogeny.svg',
                                  report_dir=config['report_dir'],
                                  reference=pipeline.references)

                ascii:
                    from: expand('reference/{reference}/alignment/{reference}.aln.treefile.ascii',
                                  reference=pipeline.references)

                    to:   expand('{report_dir}/_reference/{reference}/phylogeny.txt',
                                  report_dir=config['report_dir'],
                                  reference=pipeline.references)
            depends:
                - reference/phylogeny

        comparison:
            output:
                html:
                    from: expand('reference/{reference}/alignment/{reference}.aln.html',
                                  reference=pipeline.references)

                    to:   expand('{report_dir}/_reference/{reference}/alignment.html',
                                  report_dir=config['report_dir'],
                                  reference=pipeline.references)
            depends:
                - reference/alignment

mapping:
    mapper:
        output:
            alignments: expand('mapping/{sr.reference}/original/{sr.sample}.bam',
                                sr=pipeline.sample_references)
        depends:
            - reads/preprocess
            - reads/report/quality_report
    index:
        output:
            bam_indices: expand('mapping/{sr.reference}/{map_type}/{sr.sample}.bam.bai',
                                 sr=pipeline.sample_references, map_type=pipeline.postprocessed_map_type)

    postprocess:
        sorted:
            output:
                mapped_reads: expand('mapping/{sr.reference}/sorted/{sr.sample}.bam', sr=pipeline.sample_references)
        filtered:
            output:
                mapped_reads: expand('mapping/{sr.reference}/filtered/{sr.sample}.bam', sr=pipeline.sample_references)
        read_group:
            output:
                mapped_reads: expand('mapping/{sr.reference}/read_group/{sr.sample}.bam', sr=pipeline.sample_references)
        deduplicated:
            output:
                mapped_reads: expand('mapping/{sr.reference}/deduplicated/{sr.sample}.bam', sr=pipeline.sample_references)
        deoverlapped:
            output:
                mapped_reads: expand('mapping/{sr.reference}/deoverlapped/{sr.sample}.bam', sr=pipeline.sample_references)
        recalibrated:
            output:
                mapped_reads: expand('mapping/{sr.reference}/recalibrated/{sr.sample}.bam', sr=pipeline.sample_references)
    oncomers:
        output:
            out:
                from: expand('mapping/{sr.reference}/{map_type}/{sr.sample}.oncomers.out', sr=pipeline.sample_references, map_type=pipeline.postprocessed_map_type)
                to: expand('{report_dir}/{sr.sample}/mapping/{map_type}-{sr.reference}.oncomers.out', sr=pipeline.sample_references, map_type=pipeline.postprocessed_map_type)

    merged:
        output:
            merged_bam: expand('mapping/{reference}/merged/merged.bam',
                                reference=pipeline.references)

            merged_bai: expand('mapping/{reference}/merged/merged.bam.bai',
                                reference=pipeline.references)

    report:
        quality_report:
            output:
                quality_reports:
                    from: expand('mapping/{sr.reference}/{map_type}/stats-{sr.panel}/samples/{sr.sample}/report.pdf',
                                  sr=pipeline.sample_references, map_type=map_types_with_quality_report)

                    to:   expand('{report_dir}/{sr.sample}/mapping_quality/{map_type}-{sr.reference}.pdf',
                                  report_dir=config['report_dir'],
                                  sr=pipeline.sample_references, map_type=map_types_with_quality_report)

                summary_report:
                    from: expand('mapping/{sr.reference}/{map_type}/stats-{sr.panel}/summary/report.pdf',
                                  sr=multisample_references, map_type=map_types_with_quality_report)

                    to:   expand('{report_dir}/_summary/mapping_quality/{map_type}-{sr.reference}.pdf',
                                  report_dir=config['report_dir'],
                                  sr=multisample_references, map_type=map_types_with_quality_report)

            depends:
                - mapping/mapper

        methylation:
            output:
                methylation_reports:
                    from: expand('mapping/{sr.reference}/{map_type}/bismark/{sr.sample}.html',
                                  sr=pipeline.sample_references, map_type='original')

                    to:   expand('{report_dir}/{sr.sample}/methylation_quality/{sr.reference}.html',
                                  report_dir=config['report_dir'],
                                  sr=pipeline.sample_references)

            depends:
                - mapping/mapper

        recalibration:
            output:
                recalibration_reports:
                    from: expand('mapping/{sr.reference}/recalibrated/qc-stats/samples/{sr.sample}/covariates.pdf',
                                 sr=pipeline.sample_references)

                    to:   expand('{report_dir}/{sr.sample}/recalibration/{sr.reference}.pdf',
                                 report_dir=config['report_dir'],
                                 sr=pipeline.sample_references)
            depends:
                - mapping/postprocess/recalibrated

variant:
    caller:
        output:
            vcf:
                from: expand('variant/{sr.reference}-{sr.panel}/original/{sr.sample}.vcf',
                              sr=pipeline.sample_references)

                to:   expand('{report_dir}/{sr.sample}/original-{sr.reference}-{sr.panel}.vcf',
                              report_dir=config['report_dir'], sr=pipeline.sample_references)
        depends:
            - reads/preprocess
            - reads/report/quality_report
            - mapping/mapper

    postprocess:
        recalibrated:
            output:
                vcf:
                    from:
                        expand('variant/{sr.reference}-{sr.panel}/recalibrated/{sr.sample}.vcf',
                                sr=pipeline.sample_references)
                    to:
                        expand('{report_dir}/{sr.sample}/recalibrated-{sr.reference}-{sr.panel}.vcf',
                               report_dir=config['report_dir'], sr=pipeline.sample_references)

        normalized:
            output:
                vcf:
                    from:
                        expand('variant/{sr.reference}-{sr.panel}/normalized/{sr.sample}.vcf',
                              sr=pipeline.sample_references)
                    to:
                        expand('{report_dir}/{sr.sample}/normalized-{sr.reference}-{sr.panel}.vcf',
                              report_dir=config['report_dir'], sr=pipeline.sample_references)

        filtered:
            output:
                vcf:
                    from:
                        expand('variant/{sr.reference}-{sr.panel}/filtered/{sr.sample}.vcf',
                              sr=pipeline.sample_references)
                    to:
                        expand('{report_dir}/{sr.sample}/filtered-{sr.reference}-{sr.panel}.vcf',
                              report_dir=config['report_dir'], sr=pipeline.sample_references)

        annotated:
            output:
                vcf:
                    from:
                        expand('variant/{sr.reference}-{sr.panel}/annotated/{sr.sample}.vcf',
                            sr=pipeline.sample_references)
                    to:
                        expand('{report_dir}/{sr.sample}/annotated-{sr.reference}-{sr.panel}.vcf',
                               report_dir=config['report_dir'], sr=pipeline.sample_references)

                tsv:
                    from: expand('variant/{sr.reference}-{sr.panel}/annotated/{sr.sample}.tsv',
                                  sr=pipeline.sample_references)

                    to: expand('{report_dir}/{sr.sample}/annotated-{sr.reference}-{sr.panel}.tsv',
                        report_dir=config['report_dir'], sr=pipeline.sample_references)

                html:
                    from: expand('variant/{sr.reference}-{sr.panel}/annotated/{sr.sample}.report.html',
                        sr=pipeline.sample_references)

                    to: expand('{report_dir}/{sr.sample}/annotated-{sr.reference}-{sr.panel}.report.html',
                        report_dir=config['report_dir'], sr=pipeline.sample_references)

    report:
        calling:
            output:
                metrics:
                    from: expand('variant/{sr.reference}-{sr.panel}/original/calling_metrics/{sr.sample}.variant_calling_detail_metrics',
                                  sr=pipeline.sample_references)

                    to:   expand('{report_dir}/{sr.sample}/original-{sr.reference}-{sr.panel}.metrics.tsv',
                                  report_dir=config['report_dir'], sr=pipeline.sample_references)

            depends:
                - reads/preprocess
                - reads/report/quality_report
                - mapping/mapper

        summary:
            output:
                pdf:
                    from: expand('variant/{sr.reference}-{sr.panel}/original/report/{sr.sample}.pdf',
                                  sr=pipeline.sample_references)

                    to:   expand('{report_dir}/{sr.sample}/summary-{sr.reference}-{sr.panel}.pdf',
                                  report_dir=config['report_dir'], sr=pipeline.sample_references)
            depends:
                - reads/preprocess
                - reads/report/quality_report
                - mapping/mapper

consensus:
    fasta:
        output:
            fasta:
                from: expand('consensus/{sr.reference}-{sr.panel}/{sr.sample}.fa', sr=pipeline.sample_references)

                to: expand('{report_dir}/{sr.sample}/consensus-{sr.reference}-{sr.panel}.fa',
                            report_dir=config['report_dir'], sr=pipeline.sample_references)
        depends:
            - variant/caller

    summary:
        output:
            fasta:
              from: expand('consensus/{sr.reference}-{sr.panel}/consensus.fa',
                report_dir=config['report_dir'], sr=pipeline.sample_references)

              to: expand('{report_dir}/_summary/consensus-{sr.reference}-{sr.panel}.fa',
                report_dir=config['report_dir'], sr=pipeline.sample_references)
lineage:
    caller:
        output:
            report:
                from: expand('consensus/{sr.reference}-{sr.panel}/{sr.sample}.lineage_report.csv',
                            sr=pipeline.sample_references)
                to: expand('{report_dir}/{sr.sample}/lineage_report-{sr.reference}-{sr.panel}.csv',
                            report_dir=config['report_dir'], sr=pipeline.sample_references)
        depends:
            - variant/caller

    summary:
        output:
            summary:
                from: expand('consensus/{sr.reference}-{sr.panel}/lineage_report.{type}',
                    sr=pipeline.sample_references, type=["summary.csv", "subtotal.tsv"])
                to: expand('{report_dir}/_summary/lineage_report-{sr.reference}-{sr.panel}-{type}',
                    report_dir=config['report_dir'], sr=pipeline.sample_references,
                    type=['summary.csv', "subtotal.tsv"])
        depends:
            - lineage/caller

misc:
    mixed_positions:
        count:
            output:
                txt:
                    from: expand('misc/{sr.reference}-{sr.panel}/mixed_positions/{sr.sample}.txt',
                        sr=pipeline.sample_references)

                    to: expand('{report_dir}/{sr.sample}/mixed_positions-{sr.reference}-{sr.panel}.txt',
                        report_dir=config['report_dir'], sr=pipeline.sample_references)

            depends:
              - variant/caller

        summary:
            output:
                txt:
                    from: expand('misc/{sr.reference}-{sr.panel}/mixed_samples_{category}.txt',
                        sr=pipeline.sample_references, category=['all', 'filtered'])

                    to: expand('{report_dir}/_summary/mixed_samples_{category}-{sr.reference}-{sr.panel}.txt',
                        report_dir=config['report_dir'], sr=pipeline.sample_references,
                        category=['all', 'filtered'])

            depends:
                - misc/mixed_positions/count

classification:
    read_based:
        output:
            kronas: expand('classification/{sr.reference}/report/krona/individual/{sr.sample}.krn',
                            sr=pipeline.sample_references)
        depends:
            - reads/preprocess
            - reads/report
    contig_based:
        output: []
        depends:
            - reads/preprocess
            - reads/report
    viral:
        identification:
            output: []
            depends:
                - reads/preprocess
                - reads/report
    transcripts:
        output:
            classification: expand('classification/{reference}/report/krona/individual/{sample}.krn',
                                    reference=pipeline.references, sample=pipeline.samples)
        depends:
            - reads/preprocess
            - reads/report

    differential_analysis:
        output:
            analysis:
                from: expand('classification/{reference}/report/comparison/differential_analysis.tsv',
                              reference=pipeline.references)

                to:   expand('{report_dir}/_summary/differential_analysis-{reference}/expression.tsv',
                                report_dir=config['report_dir'], reference=pipeline.references)

        filter_significant:
            output:
                analysis:
                    from: expand('classification/{reference}/report/comparison/significant.tsv',
                                  reference=pipeline.references)

                    to:   expand('{report_dir}/_summary/differential_analysis-{reference}/significantly_changed.tsv',
                                  report_dir=config['report_dir'], reference=pipeline.references)

    report:
        taxonomic_counts:
            barplot:
                output:
                    barplots:
                        from: expand('classification/{reference}/report/figures/{tax_level}.{type}.{format}',
                                      reference=pipeline.references, tax_level=tax_levels_barplot,
                                      type=['counts', 'ratios'], format=barplot_formats)

                        to:   expand('{report_dir}/_summary/taxonomy-{reference}/barplots/{tax_level}.{type}.{format}',
                                      report_dir=config['report_dir'], reference=pipeline.references,
                                      tax_level=tax_levels_barplot, type=['counts', 'ratios'], format=barplot_formats)

                depends:
                    - classification/read_based

            pieplot:
                output:
                    summary_html:
                        from: expand('classification/{reference}/report/krona/taxonomic_counts.html',
                                      reference=pipeline.references)

                        to:   expand('{report_dir}/_summary/taxonomy-{reference}/taxonomic_counts.html',
                                      report_dir=config['report_dir'], reference=pipeline.references)

                    krona:
                        from: expand('classification/{sr.reference}/report/krona/individual/{sr.sample}.html',
                                      sr=pipeline.sample_references)

                        to:   expand('{report_dir}/{sr.sample}/taxonomic_counts-{sr.reference}.html',
                                      report_dir=config['report_dir'],
                                      sr=pipeline.sample_references)

                depends:
                    - classification/read_based

            count_table:
                output:
                    tables:
                        from: expand('classification/{reference}/report/tsv/{tax_level}.{type}.tsv',
                                      reference=pipeline.references, tax_level=tax_levels_count_table,
                                      type=['counts', 'ratios'])

                        to:   expand('{report_dir}/_summary/taxonomy-{reference}/counts/{tax_level}.{type}.tsv',
                                      report_dir=config['report_dir'], reference=pipeline.references,
                                      tax_level=tax_levels_count_table, type=['counts', 'ratios'])
                depends:
                    - classification/read_based
            alpha_diversity:
                output:
                    alpha_divs:
                        from: expand('classification/{reference}/report/tsv/{tax_level}.alpha{alpha_mode}.tsv', reference=pipeline.references, tax_level=tax_levels_alphas, alpha_mode=['_norm', '_pure'])
                        to: expand('{report_dir}/{reference}/tsv/{tax_level}.alpha{alpha_mode}.tsv', report_dir=config['report_dir'], reference=pipeline.references, tax_level=tax_levels_alphas, alpha_mode=['_norm', '_pure'])
                depends:
                    - classification/read_based
        summary:
            output:
                summary_html:
                    from: expand('assembly/{sample}/annotation/contigs/summary.html',
                                  sample=pipeline.samples)

                    to:   expand('{report_dir}/{sample}/contig_annotations.html',
                                  sample=pipeline.samples, report_dir=config['report_dir'])

                contigs:
                    from: expand('assembly/{sample}/annotation/contigs/sequences/',
                                  sample=pipeline.samples)

                    to:   expand('{report_dir}/{sample}/sequences/',
                                  sample=pipeline.samples, report_dir=config['report_dir'])

            depends:
                - classification/contig_based

        transcripts:
            count_table:
                output:
                    tsv_table:
                        from: expand('classification/{reference}/report/tsv/summary{subtype}.{format}',
                                      subtype=['', '.normed'], format=['xlsx', 'tsv'],
                                      reference=pipeline.references)

                        to:   expand('{report_dir}/_summary/transcript_counts/summary{subtype}.{format}',
                                      report_dir=config['report_dir'], subtype=['', '.normed'],
                                      format=['xlsx', 'tsv'])

                depends:
                    - classification/differential_analysis

            html_table:
                output:
                    html_table:
                        from: expand('classification/{reference}/report/comparison/differential_analysis.html',
                                      reference=pipeline.references)

                        to: expand('{report_dir}/_summary/differential_analysis/summary.html',
                                    report_dir=config['report_dir'])
                depends:
                    - classification/differential_analysis

            revigo:
                output:
                    revigo_format:
                        from: expand('classification/{reference}/report/comparison/significant.revigo.tsv',
                                      reference=pipeline.references)

                        to:   expand('{report_dir}/_summary/differential_analysis/revigo.txt',
                                      report_dir=config['report_dir'])
                depends:
                    - classification/differential_analysis

            pca:
                output:
                    images:
                        from: expand('classification/{reference}/report/comparison/pca.{format}',
                                      reference=pipeline.references, format=pca_formats)

                        to:   expand('{report_dir}/_summary/transcript_counts-{reference}/pca.{format}',
                                      report_dir=config['report_dir'],
                                      reference=pipeline.references, format=pca_formats)
                    depends:
                    - classification/transcripts/count_table
            depends:
                - classification/samples

assembly:
    assembler:
        output:
            contigs:
                from: expand('assembly/{sample}/contigs.fa',
                              sample=pipeline.samples)

                to:   expand('{report_dir}/{sample}/assembled_contigs.fa',
                              report_dir=config['report_dir'],
                              sample=pipeline.samples)
        depends:
            - reads/preprocess
            - reads/report
    report:
        quality_report:
            output:
                quality_reports:
                    from: expand('assembly/{sample}/quality_report/report.pdf',
                                  sample=pipeline.samples)

                    to:   expand('{report_dir}/{sample}/assembly_report/report.pdf',
                                  report_dir=config['report_dir'],
                                  sample=pipeline.samples)

        assembly_graph:
            output:
                overlap_graphs:
                    from: expand('assembly/{sample}/assembly_graph.svg',
                                  sample=pipeline.samples)

                    to:   expand('{report_dir}/{sample}/assembly_report/contig_graph.svg',
                                  report_dir=config['report_dir'],
                                  sample=pipeline.samples)



qiime2:
    import:
        manifest:
            output:
                manifest:
                    from: expand('qiime2/import/{reference}.manifest',
                                        reference=pipeline.references)

                    to:   expand('{report_dir}/{reference}/00_import_report/{reference}.manifest',
                                        report_dir=config['report_dir'],
                                        reference=pipeline.references)
        data:
            output:
                qza: expand('qiime2/import/{reference}.qza',
                                        reference=pipeline.references)
                metadata:
                    from: expand('qiime2/import/sample-metadata.tsv')

                    to:   expand('{report_dir}/{reference}/00_import_report/sample-metadata.tsv',
                                        report_dir=config['report_dir'],
                                        reference=pipeline.references)

    preprocess:
        demultiplex:
            output:
                qza: expand('qiime2/preprocess/demultiplex/{reference}.qza',
                                        reference=pipeline.references)
                qzv: expand('qiime2/preprocess/report/{reference}_quality.qzv',
                                        reference=pipeline.references)
        joining:
            output:
                qza: expand('qiime2/preprocess/joining/{reference}.qza',
                                        reference=pipeline.references)
                qzv: expand('qiime2/preprocess/joining/{reference}_quality.qzv',
                                        reference=pipeline.references)
                stats:
                    from: expand('qiime2/preprocess/joining/{reference}_quality/',
                                            reference=pipeline.references)
                    to: expand('{report_dir}/{reference}/01_preprocessing_report/joining/',
                                            report_dir=config['report_dir'],
                                            reference=pipeline.references)
        quality_filter:
            output:
                qza: expand('qiime2/preprocess/qscore/{reference}.qza',
                                        reference=pipeline.references)
                qzv: expand('qiime2/preprocess/qscore/{reference}_stats.qzv',
                                        reference=pipeline.references)
                stats:
                    from: expand('qiime2/preprocess/qscore/{reference}_stats/',
                                            reference=pipeline.references)
                    to: expand('{report_dir}/{reference}/01_preprocessing_report/quality_filter/',
                                            report_dir=config['report_dir'],
                                            reference=pipeline.references)
        denoise:
            output:
                qza: expand('qiime2/preprocess/denoise/original/{reference}_{type}.qza',
                                        reference=pipeline.references,
                                        type=['rep-seqs', 'table', 'denoising-stats'])

                qzv: expand('qiime2/preprocess/report/{reference}_denoising-stats.qzv',
                                        reference=pipeline.references)
        post_filter:
            alignment_filter:
                output:
                    qza: expand('qiime2/preprocess/denoise/alignment_filter/{reference}_{type}.qza',
                                        reference=pipeline.references,
                                        type=['rep-seqs', 'table'])
            fix_seq_orientation:
                output:
                    qza: expand('qiime2/preprocess/denoise/fix_seq_orientation/{reference}_{type}.qza',
                                        reference=pipeline.references,
                                        type=['rep-seqs', 'table'])

        report:
            core_features:
                output:
                    qzv: expand('qiime2/preprocess/report/{reference}_core_features.qzv',
                                            reference=pipeline.references)
            feature_table:
                output:
                    qzv: expand('qiime2/preprocess/report/{reference}_{type}.qzv',
                                            reference=pipeline.references,
                                            type=['rep-seqs', 'table'])
            feature_heatmap:
                output:
                    qzv: expand('qiime2/preprocess/report/{reference}_{column}_heatmap.qzv',
                                            reference=pipeline.references,
                                            column=qiime2_heatmap_columns)
            export:
                output:
                    read_quality_report:
                        from:   expand('qiime2/preprocess/report/{reference}_quality/',
                                            reference=pipeline.references)
                        to:     expand('{report_dir}/{reference}/01_preprocessing_report/read_quality/',
                                            report_dir=config['report_dir'],
                                            reference=pipeline.references)
                    denoise_report:
                        from:   expand('qiime2/preprocess/report/{reference}_denoising-stats/',
                                            reference=pipeline.references)
                        to:     expand('{report_dir}/{reference}/01_preprocessing_report/denoise_stats/',
                                            report_dir=config['report_dir'],
                                            reference=pipeline.references)
                    preprocessing_report:
                        from:   expand('qiime2/preprocess/report/{reference}_{type}/',
                                            type=['rep-seqs', 'table'],
                                            reference=pipeline.references)
                        to:     expand('{report_dir}/{reference}/01_preprocessing_report/features/{type}/',
                                            report_dir=config['report_dir'],
                                            type=['representative_sequences', 'table'],
                                            reference=pipeline.references)
                    heatmap_report:
                        from:   expand('qiime2/preprocess/report/{reference}_{column}_heatmap/',
                                            reference=pipeline.references,
                                            column=qiime2_heatmap_columns)
                        to:     expand('{report_dir}/{reference}/01_preprocessing_report/heatmap/{column}',
                                            report_dir=config['report_dir'],
                                            reference=pipeline.references,
                                            column=qiime2_heatmap_columns)
                    core_features_report:
                        from:   expand('qiime2/preprocess/report/{reference}_core_features/',
                                            reference=pipeline.references)
                        to:     expand('{report_dir}/{reference}/01_preprocessing_report/core/',
                                            report_dir=config['report_dir'],
                                            reference=pipeline.references)

    analysis:
        phylogeny:
            output:
                alignment: expand('qiime2/analysis/alignment/{reference}_{type}.qza',
                                        reference=pipeline.references,
                                        type=['rep-aligned-seqs','rep-masked-aligned-seqs','unrooted-tree','rooted-tree'])
        rarefaction:
            rarefaction:
                output:
                    qzv: expand('qiime2/analysis/rarefaction/{reference}_alpha.qzv',
                                            reference=pipeline.references)
                    report:
                        from:   expand('qiime2/analysis/rarefaction/{reference}_alpha/',
                                        reference=pipeline.references)
                        to:     expand('{report_dir}/{reference}/02_core_metrics_report/rarefaction/',
                                        report_dir=config['report_dir'],
                                        reference=pipeline.references)

        core_metrics:
            output:
                rarefied_table: expand('qiime2/analysis/core_metrics/{reference}_rarefied_table.qza',
                                        reference=pipeline.references)
                vector: expand('qiime2/analysis/core_metrics/{reference}_{type}_vector.qza',
                                        reference=pipeline.references,
                                        type=qiime2_alpha_types)
                dist_matrix: expand('qiime2/analysis/core_metrics/{reference}_{type}_dist_matrix.qza',
                                        reference=pipeline.references,
                                        type=qiime2_beta_types)
                pcoa: expand('qiime2/analysis/core_metrics/{reference}_{type}_pcoa.qza',
                                        reference=pipeline.references,
                                        type=qiime2_beta_types)
                qzv: expand('qiime2/analysis/core_metrics/{reference}_{type}_emperor.qzv',
                                        reference=pipeline.references,
                                        type=qiime2_beta_types)
        diversity:
            alpha:
                output:
                    qzv: expand('qiime2/analysis/core_metrics/alpha/{reference}_{type}_group_significance.qzv',
                                        reference=pipeline.references,
                                        type=qiime2_alpha_types)
                    alpha_group_significance_reports:
                        from:   expand('qiime2/analysis/core_metrics/alpha/{reference}_{type}_group_significance/',
                                        reference=pipeline.references,
                                        type=qiime2_alpha_types)
                        to:     expand('{report_dir}/{reference}/02_core_metrics_report/alpha_group_significance/{type}_group_significance/',
                                        report_dir=config['report_dir'],
                                        reference=pipeline.references,
                                        type=qiime2_alpha_types)
            beta:
                output:
                    qzv: expand('qiime2/analysis/core_metrics/beta/{reference}_{type}_{column}_significance.qzv',
                                        reference=pipeline.references,
                                        type=qiime2_beta_types,
                                        column=qiime2_beta_significance_columns)
                    beta_group_significance_reports:
                        from:   expand('qiime2/analysis/core_metrics/beta/{reference}_{type}_{column}_significance/',
                                        reference=pipeline.references,
                                        type=qiime2_beta_types,
                                        column=qiime2_beta_significance_columns)
                        to:     expand('{report_dir}/{reference}/02_core_metrics_report/beta_group_significance/{column}/{type}_significance/',
                                        report_dir=config['report_dir'],
                                        reference=pipeline.references,
                                        type=qiime2_beta_types,
                                        column=qiime2_beta_significance_columns)
            pcoa_explore:
                output:
                    qzv: expand('qiime2/analysis/core_metrics/pcoa_explore/{reference}_{type}_{column}_emperor.qzv',
                                        reference=pipeline.references,
                                        type=qiime2_beta_types,
                                        column=qiime2_pcoa_custom_columns)
                    emperor_plot_reports:
                        from:   expand('qiime2/analysis/core_metrics/{reference}_{type}_emperor/',
                                        reference=pipeline.references,
                                        type=qiime2_beta_types)
                        to:     expand('{report_dir}/{reference}/02_core_metrics_report/emperor_plots/{type}_emperor/',
                                        report_dir=config['report_dir'],
                                        reference=pipeline.references,
                                        type=qiime2_beta_types)
                    pcoa_explore_reports:
                        from:   expand('qiime2/analysis/core_metrics/pcoa_explore/{reference}_{type}_{column}_emperor/',
                                        reference=pipeline.references,
                                        column=qiime2_pcoa_custom_columns,
                                        type=qiime2_beta_types)
                        to:     expand('{report_dir}/{reference}/02_core_metrics_report/pcoa_explore/{column}/{type}_emperor/',
                                        report_dir=config['report_dir'],
                                        reference=pipeline.references,
                                        column=qiime2_pcoa_custom_columns,
                                        type=qiime2_beta_types)

        taxonomy:
            import:
                output:
                    ref_import: expand('reference/{reference}/qiime2/ref_{type}.qza',
                                        reference=pipeline.references,
                                        type=['reads', 'tax'])
            classify:
                output:
                    classification: expand('qiime2/taxonomy/{reference}_tax.qza',
                                        reference=pipeline.references)
            barplot:
                output:
                    qzv: expand('qiime2/{reference}/taxonomy/{type}/{processing_step}.qzv',
                                        type=['taxa_features','barplot'],
                                        processing_step=set([pipeline.qiime2_type, pipeline.qiime2_post_taxa]),
                                        reference=pipeline.references)
                    plot:
                        from:   expand('qiime2/{reference}/taxonomy/{type}/{processing_step}/',
                                        type=['taxa_features','barplot'],
                                        processing_step=set([pipeline.qiime2_type, pipeline.qiime2_post_taxa]),
                                        reference=pipeline.references)
                        to:     expand('{report_dir}/{reference}/03_taxonomy_report/{type}/{processing_step}/',
                                        report_dir=config['report_dir'],
                                        reference=pipeline.references,
                                        processing_step=set([pipeline.qiime2_type, pipeline.qiime2_post_taxa]),
                                        type=['taxa_features','barplot'])
        taxa_filter:
            output:
                qza: expand('qiime2/preprocess/denoise/{processing_step}/{reference}_{type}.qza',
                                        processing_step=pipeline.qiime2_post_taxa,
                                        reference=pipeline.references,
                                        type=['rep-seqs', 'table'])

        differential_abundance:
            output:
                taxa_collapsed: expand('qiime2/taxonomy/{reference}_tax_collapsed.qza',
                                    reference=pipeline.references)
                taxa_collapsed_rel: expand('qiime2/taxonomy/lefse/{reference}_tax_collapsed_relative.qza',
                                    reference=pipeline.references)
                taxa_collapsed_table: expand('qiime2/taxonomy/lefse/{reference}_tax_collapsed_relative/',
                                    reference=pipeline.references)
                biom_table: expand('qiime2/taxonomy/lefse/{reference}_tax_collapsed_relative/feature-table.biom',
                                    reference=pipeline.references)
                biom_txt: expand('qiime2/taxonomy/lefse/{reference}_tax_collapsed_relative/feature-table.tsv',
                                    reference=pipeline.references)
                biom_corr_txt: expand('qiime2/taxonomy/lefse/{reference}_tax_collapsed_relative/feature-table_corr.tsv',
                                    reference=pipeline.references)
                lefse_input: expand('qiime2/analysis/lefse/{reference}.in',
                                    reference=pipeline.references)
                lefse_result: expand('qiime2/analysis/lefse/{reference}.res',
                                    reference=pipeline.references)
                lefse_result_pdf:
                    from:   expand('qiime2/analysis/lefse/result/{reference}.pdf',
                                    reference=pipeline.references)
                    to:     expand('{report_dir}/{reference}/05_differential_abundance/lefse/result.pdf',
                                    report_dir=config['report_dir'],
                                    reference=pipeline.references)
                cladogram:
                    from:   expand('qiime2/analysis/lefse/cladogram/{reference}.pdf',
                                    reference=pipeline.references)
                    to:     expand('{report_dir}/{reference}/05_differential_abundance/lefse/cladogram.pdf',
                                    report_dir=config['report_dir'],
                                    reference=pipeline.references)
                features:
                    from:   expand('qiime2/analysis/lefse/{reference}_features/',
                                    reference=pipeline.references)
                    to:     expand('{report_dir}/{reference}/05_differential_abundance/lefse/{reference}_features/',
                                    report_dir=config['report_dir'],
                                    reference=pipeline.references)
        composition_analysis:
            output:
                feature_table_filt: expand('qiime2/analysis/ancom/{reference}_table_filt.qza',
                                        reference=pipeline.references)
                feature_table_comp: expand('qiime2/analysis/ancom/{reference}_table_comp.qza',
                                        reference=pipeline.references)
                qzv: expand('qiime2/analysis/ancom/{reference}_{column}_ancom.qzv',
                                        reference=pipeline.references,
                                        column=qiime2_ancom_columns)
                ancom_reports:
                    from:   expand('qiime2/analysis/ancom/{reference}_{column}_ancom/',
                                        reference=pipeline.references,
                                        column=qiime2_ancom_columns)
                    to:     expand('{report_dir}/{reference}/04_composition_analysis/ancom/{column}/',
                                        report_dir=config['report_dir'],
                                        reference=pipeline.references,
                                        column=qiime2_ancom_columns)

        composition_analysis_taxa:
            output:
                taxa_collapsed: expand('qiime2/taxonomy/{reference}_level{level}_collapsed.qza',
                                        reference=pipeline.references,
                                        level=qiime2_ancom_taxa_lvls)
                feature_table_filt: expand('qiime2/analysis/ancom_taxa/{reference}_level{level}_table_filt.qza',
                                        reference=pipeline.references,
                                        level=qiime2_ancom_taxa_lvls)
                feature_table_comp: expand('qiime2/analysis/ancom_taxa/{reference}_level{level}_table_comp.qza',
                                        reference=pipeline.references,
                                        level=qiime2_ancom_taxa_lvls)
                ancom_taxa_qzv: expand('qiime2/analysis/ancom_taxa/{reference}_level{level}_{column}_ancom.qzv',
                                        reference=pipeline.references,
                                        level=qiime2_ancom_taxa_lvls,
                                        column=qiime2_ancom_taxa_columns)
                ancom_taxa_reports:
                    from:   expand('qiime2/analysis/ancom_taxa/{reference}_level{level}_{column}_ancom/',
                                        reference=pipeline.references,
                                        level=qiime2_ancom_taxa_lvls,
                                        column=qiime2_ancom_columns)
                    to:     expand('{report_dir}/{reference}/04_composition_analysis/ancom_taxa/{column}_level{level}/',
                                        report_dir=config['report_dir'],
                                        reference=pipeline.references,
                                        level=qiime2_ancom_taxa_lvls,
                                        column=qiime2_ancom_columns)
