include: config['snakelines_dir'] + '/rules/reference/indices/faidx.snake'

import vcf

rule mpileup_germline:
    input:
        bam = '{mapper}/{reference}/%s{sample}.bam' % map_subdir,
        bai = '{mapper}/{reference}/%s{sample}.bam.bai' % map_subdir,
        bed = 'reference/{reference}/annotation/{panel}/regions.bed',
        reffasta = 'reference/{reference}/{reference}.fa',
        reffaidx = 'reference/{reference}/{reference}.fa.fai'
    output:
        vcf = '{mapper}/{reference}/mpileup-{panel}/{sample}.germline.vcf'
    shell:
        '''
        samtools mpileup \
            --max-depth 10000 \
            --min-BQ 20 \
            --positions {input.bed} \
            --uncompressed \
            --fasta-ref {input.reffasta} \
            --output-tags DP,AD,ADF,ADR,SP,INFO/AD,INFO/ADF,INFO/ADR \
            --ignore-RG \
            {input.bam} \
        | bcftools filter \
            --exclude 'ALT="<*>"' \
            - \
        | sed 's/,<\*>//' \
        > {output.vcf}
        '''

rule mpileup_lowqual:
    input:
        bam = '{mapper}/{reference}/{sample}.bam',
        bai = '{mapper}/{reference}/{sample}.bam.bai',
        bed = 'reference/{reference}/annotation/{panel}/regions.bed',
        reffasta = 'reference/{reference}/{reference}.fa',
        reffaidx = 'reference/{reference}/{reference}.fa.fai'
    output:
        vcf = '{mapper}/{reference}/mpileup/{sample}.{panel}.lowqual.vcf'
    shell:
        '''
        samtools mpileup \
            --ignore-rg \
            --min-MQ 20 \
            --min-BQ 20 \
            --positions {input.bed} \
            --uncompressed \
            --fasta-ref {input.reffasta} \
            {input.bam} \
        | bcftools call \
            --consensus-caller \
            --pval-threshold 10000 \
            - \
        | bcftools filter \
            --exclude 'ALT="<*>"' \
            - \
        > {output.vcf}
        '''

rule mpileup_rare:
    input:
        vcf = '{mapper}/{reference}/mpileup-{panel}/{sample}.vcf'
    output:
        vcf = '{mapper}/{reference}/mpileup-{panel}/{sample}.rare.vcf'
    run:
        MAX_COVERAGE = 0.1

        vin = vcf.Reader(open(input.vcf))
        vout = vcf.Writer(open(output.vcf, 'w'), vin)
        for rec in vin:
            dp4 = rec.INFO['DP4']
            ac = sum(dp4[-2:])
            an = sum(dp4)
            af = ac / an
            if af > MAX_COVERAGE:
                continue
            rec.add_info('AF', af)
            rec.add_info('AC', 2)
            rec.add_info('AN', an)
            vout.write_record(rec)

        vout.close()