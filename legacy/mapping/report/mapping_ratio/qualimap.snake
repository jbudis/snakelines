
# TODO Simplify and docstring
def qualimap_files(wildcards):
    bamdir = wildcards.bamdir if hasattr(wildcards, 'bamdir') else '%s/%s' % (wildcards.mapper, wildcards.reference)
    return expand('%s/stats-%s/{sample}/genome_results.txt' % (bamdir, wildcards.panel), \
                   sample=pipeline.samples)

rule qualimap__extract_mapped_read_counts:
    """
    Extract number of mapped reads from qualimap results and stored them into summary table.
    """
    input:
        qualimap_files
    output:
        tsv = '{bamdir}/stats-{panel}/read_count.tsv'
    run:
        def percent(text):
            return '%.4f' % (float(text[text.find('(') + 1: text.rfind('%')]) / 100)

        def extract_attribute(qualimap, attribute, convert):
            with open(qualimap) as report:
                for line in report:
                    if ' = ' not in line:
                        continue
                    line = line.strip()
                    key, value = line.split(' = ')
                    if key == attribute:
                        return convert(value)

        percents = []
        for qualimap in input:
            percents.append(extract_attribute(qualimap, 'number of mapped reads', percent))

        sids = [os.path.basename(os.path.dirname(qualimap)) for qualimap in input]

        table = pd.DataFrame(index=sids)
        table['mapped'] = percents
        table.to_csv(output.tsv, sep='\t')