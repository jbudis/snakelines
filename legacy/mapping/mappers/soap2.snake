rule soap2_map_reads:
    input:
        r1 = 'reads/{read_type}/{sample}_R1.fastq.gz',
        r2 = 'reads/{read_type}/{sample}_R2.fastq.gz',
        index = 'reference/{reference}/soap2_index/{reference}.fa.index.ann'
    output:
        soap = temp('soap2/{reference}/{read_type}/{sample}.soap'),
        others = temp('soap2/{reference}/{read_type}/{sample}.oth')
    log:
        'soap2/{reference}/{read_type}/log/{sample}.map'
    params:
	      index = 'reference/{reference}/soap2_index/{reference}.fa.index'
    benchmark:
        'soap2/{reference}/{read_type}/benchmark/{sample}.txt'
    threads:
        int(config['threads'])
    shell:
        '''
        hostname > {log}.host;
        soap2 \
            -a {input.r1} \
            -b {input.r2} \
            -D {params.index} \
            -m 0 \
            -x 1000 \
            -p {threads} \
            -o {output.soap} \
            -2 {output.others} \
            > {log} 2> {log}
        '''
        
rule soap_to_sam:
    input:
        soap = 'soap2/{reference}/{read_type}/{sample}.soap'
    output:
        sam = temp('soap2/{reference}/{read_type}/{sample}.soapsam') 
    log:
        'soap2/{reference}/{read_type}/log/{sample}_soap2sam.map'
    benchmark:
        'soap2/{reference}/{read_type}/benchmark/{sample}_soap2sam.txt'
    shell:
        '''
        soap2sam \
            -p \
            {input.soap} \
        > {output.sam} \
        2> {log}
        '''

rule fix_soap:
    input:
        sam = 'soap2/{reference}/{read_type}/{sample}.soapsam',
        ref = 'reference/{reference}/{reference}.fa' 
    output:
        'soap2/{reference}/{read_type}/{sample}.bam'
    params:
        sam = temp('soap2/{reference}/{read_type}/{sample}.sam') 
    run:
        # fix the sometimes wrong 7th column in soap sam - just throw it out
        with open(params.sam, 'w') as f_out, open(input.sam) as f_in:
            for line in f_in:
                mapping = line.strip().split()[6]
                if mapping == '=' or mapping == '*':
                    f_out.write(line)
        import subprocess
        to_call = 'samtools view -bhT %s %s > %s' % (input.ref, params.sam, output)
        subprocess.call(to_call, shell=True)
        

rule soap2_index:
    input:
        'reference/{reference}/{reference}.fa'
    output:
        'reference/{reference}/soap2_index/{reference}.fa.index.ann'
    log:
        'reference/{reference}/log/soap.log'
    params:
        iname = 'reference/{reference}/{reference}.fa.index',
        output_folder = 'reference/{reference}/soap2_index'
    threads:
        int(config['threads'])
    shell:
        '''
        soap_builder \
            {input} \
        > {log};
        mkdir -p {params.output_folder};
        mv {params.iname}.* {params.output_folder}
        '''
        