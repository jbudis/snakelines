configfile: srcdir('config.yaml')

pipeline = glob_wildcards('reads/original/{sample,%s}_R1.fastq.gz' % config['sample_pattern'])

import shutil

include: config['snakelines_dir'] + '/rules/preprocess/trim_reads/trimmomatic.snake'
include: config['snakelines_dir'] + '/rules/preprocess/join_reads/pear.snake'
include: config['snakelines_dir'] + '/rules/assembly/assemblers/matam.snake'
include: config['snakelines_dir'] + '/rules/alignment/aligners/mafft.snake'
include: config['snakelines_dir'] + '/rules/alignment/visualisation/msaviewer.snake'
include: config['snakelines_dir'] + '/rules/alignment/phylogeny/iqtree.snake'
include: config['snakelines_dir'] + '/rules/alignment/visualisation/phylogenetic_tree.snake'
include: config['snakelines_dir'] + '/rules/metagenomics/diversity/alpha.snake'
include: config['snakelines_dir'] + '/rules/metagenomics/diversity/beta.snake'
include: config['snakelines_dir'] + '/rules/metagenomics/clustering/cdhit.snake'
include: config['snakelines_dir'] + '/rules/metagenomics/report/krona.snake'
include: config['snakelines_dir'] + '/rules/metagenomics/report/tax_counts.snake'
include: config['snakelines_dir'] + '/rules/classification/classifiers/blast.snake'

report_dir = 'report/{}'.format(config['report_dir'])
reference = list(config['gene_pattern'].keys())
cluster_limit = config['matam']['cluster_limit']
otu_limit = config['otu']['cluster_limit']

otu_assembly = 'assembly.otu{otu_limit}'.format(otu_limit=otu_limit)
assemblies = ['assembly', otu_assembly]

rule process:
    input:
        # Contig read counts and proportions
        counts = expand('matam/{reference}/joined/assembly.{suffix}',
                        reference=reference,
                        suffix=['counts.tsv', 'ratios.tsv']),

        # Alpha diversity
        alphas = expand('matam/{reference}/joined/assembly.alpha.tsv',
                        reference=reference,
                        assembly=assemblies),

        # Multiple alignments
        aligns = expand('matam/{reference}/joined/alignment/mafft/{assembly}.html',
                        reference=reference,
                        assembly=assemblies),

        # Phylogenetic trees
        phylos = expand('matam/{reference}/joined/alignment/mafft/{assembly}.aln.treefile.{suffix}',
                        reference=reference, assembly=assemblies,
                        suffix=['svg', 'ascii']),

        # OTU and taxonomy read counts and proportions
        otus =  expand('matam/{reference}/joined/{assembly}.{suffix}',
                        reference=reference, assembly=otu_assembly,
                        suffix=['counts.tsv', 'counts.tax.tsv', 'ratios.tsv', 'ratios.tax.tsv']),


        # Krona for annotated OTUs
        kronas = expand('matam/{reference}/joined/{assembly}.krona.html',
                        reference=reference,
                        assembly=otu_assembly)

    output:
        # Contig read counts and proportions
        counts = expand('{report_dir}/{reference}/assembly.{suffix}',
                        report_dir=report_dir, reference=reference,
                        suffix=['counts.tsv', 'ratios.tsv']),

        # Alpha diversity
        alphas = expand('{report_dir}/{reference}/assembly.alpha.tsv',
                        report_dir=report_dir, reference=reference,
                        assembly=assemblies),

        # Multiple alignments
        aligns = expand('{report_dir}/{reference}/{assembly}.html',
                        report_dir=report_dir, reference=reference,
                        assembly=assemblies),

        # Phylogenetic trees
        phylos = expand('{report_dir}/{reference}/{assembly}.aln.treefile.{suffix}',
                        report_dir=report_dir, reference=reference,
                        assembly=assemblies, suffix=['svg', 'ascii']),

        # OTU and taxonomy read counts and proportions
        otus =  expand('{report_dir}/{reference}/{assembly}.{suffix}',
                        report_dir=report_dir, reference=reference,
                        assembly=otu_assembly,
                        suffix=['counts.tsv', 'counts.tax.tsv', 'ratios.tsv', 'ratios.tax.tsv']),


        # Krona for annotated OTUs
        kronas = expand('{report_dir}/{reference}/{assembly}.krona.html',
                        report_dir=report_dir, reference=reference,
                        assembly=otu_assembly)

    run:
        def copy_files(in_files, out_files):
            for in_file, out_file in zip(in_files, out_files):
                shutil.copy(in_file, out_file)

        copy_files(input.counts, output.counts)
        copy_files(input.alphas, output.alphas)
        copy_files(input.aligns, output.aligns)
        copy_files(input.phylos, output.phylos)
        copy_files(input.otus,   output.otus)
        copy_files(input.kronas, output.kronas)