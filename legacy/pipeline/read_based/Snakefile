# TODO check fi blast references exists
import collections
# Load configuration file
configfile: srcdir('config.yaml')

# Run startup scripts that automatically loads imports from src/ and load helper methods
include: config['snakelines_dir'] + '/src/snakelines.snake'

# Import sub-workflows
include: srcdir('Snakefile.read_quality_report')
include: srcdir('Snakefile.preprocess')

#reference = config['samples']['reference']
tax_levels = ['phylum', 'class', 'order', 'family', 'genus', 'species']
count_metric = ['abs', 'rel']
report_dir = config['report_dir']
count_type = config['classification']['read_based']['count_type']

print(config['samples'][0]['name'])
print(config)
print(pipeline.preprocessed_read_type)

# Which taxonomic levels should be extracted in separate tables
tax_levels_count_table = \
extract_from_config(config, ['classification', 'report', 'taxonomic_counts', 'count_table', 'tax_levels'], [])

tax_levels_count_table.append('alltaxes')

 # Which taxonomic levels should be visualised in barplots, and in which image formats
tax_levels_barplot = \
extract_from_config(config, ['classification', 'report', 'taxonomic_counts', 'barplot', 'tax_levels'], [])
barplot_formats = \
extract_from_config(config, ['classification', 'report', 'taxonomic_counts', 'barplot', 'formats'], ['png'])


rule finalise__identify_viruses:
    """
    Pipeline annotates original or preprocessed reads. Annotations, taxonomic units (most commonly species) supported
    with number of reads or transcripts per milion (tpm) assigned to particular taxonomic unit, with bottom-up taxonomic tree.
    These results are in filterable TSV table.
    :input summary_html: summary HTML report with annotations of assembled contigs
    :output summary_html: summary HTML report with annotations of assembled contigs (in the report directory)
    """

    input:
        rules.finalise__quality_report.output,
        rules.finalise__preprocess_reads.output,

        krona_html = expand('fast_virome_explorer/{reference}/report/krona/taxonomic_counts.html',
                             reference=pipeline.references),
        tables = expand('fast_virome_explorer/{reference}/report/tsv/{tax_level}.{type}.tsv',
                         reference=pipeline.references, tax_level=tax_levels_count_table,
                         type=['counts', 'ratios']),
        barplots = expand('fast_virome_explorer/{reference}/report/figures/{tax_level}.{type}.{format}',
                           reference=pipeline.references, tax_level=tax_levels_barplot,
                           type=['counts', 'ratios'], format=barplot_formats),

    output:
        krona_html = expand('{report_dir}/{reference}/krona/taxonomic_counts.html',
        reference=pipeline.references,
        report_dir=config['report_dir']),

        tables = expand('{report_dir}/{reference}/tsv/{tax_level}.{type}.tsv',
        report_dir=config['report_dir'],
        reference=pipeline.references,
        tax_level=tax_levels_count_table,
        type=['counts', 'ratios']),

        barplots = expand('{report_dir}/{reference}/figures/{tax_level}.{type}.{format}',
        report_dir=config['report_dir'],
        reference=pipeline.references, tax_level=tax_levels_barplot,
        type=['counts', 'ratios'], format=barplot_formats),


    run:
        copy_input_files_with_consistent_output_names(input, output)

# Target rule would be executed locally, not on cluster
localrules: finalise__identify_viruses