import pandas as pd
import os

read_type = config['kallisto']['read_type']

rule kallisto_remap_transcripts_spades:
    input:
        fasta = 'spades-transcript/{sample}/contigs.fa',
        index = 'spades-transcript/{sample}/contigs.idx',
        r1 = 'reads/%s/{sample}_R1.fastq.gz' % read_type,
        r2 = 'reads/%s/{sample}_R2.fastq.gz' % read_type
    output:
        abundances = 'spades-transcript/{sample}/kallisto/abundance.tsv'
    params:
        outdir = 'spades-transcript/{sample}/kallisto',
        bootstrap_samples = config['kallisto']['bootstrap_samples']
    log:
        'spades-transcript/{sample}/kallisto/kallisto.log'
    threads:
        int(config['threads'])
    shell:
        '''
        kallisto quant \
            --index {input.index} \
            --output-dir {params.outdir} \
            --bootstrap-samples {params.bootstrap_samples} \
            --threads {threads} \
            {input.r1} \
            {input.r2}
        '''

def abundances_from_design(wildcards):
    design = 'description/design/{design}.tsv'.format(design=wildcards.design)
    sids = [line.split('\t')[1] for line in open(design) if line]
    return expand('trinity-{design}/kallisto/{sample}/abundance.tsv',
                   design=wildcards.design, sample=sids)

def fastqs_from_design(wildcards):
    design = 'description/design/{design}.tsv'.format(design=wildcards.design)
    fastqs = pd.read_csv(design, index_col=1, sep='\t', header=None)
    sid = wildcards.sample
    return fastqs.loc[sid][2].format(read_type=read_type), fastqs.loc[sid][3].format(read_type=read_type)

rule kallisto_aggregate_trinity:
    input:
        abundances = abundances_from_design
    output:
        aggregate = 'trinity-{design}/kallisto/abundance.tsv',
        tpm = 'trinity-{design}/kallisto/tpm.tsv',
        est = 'trinity-{design}/kallisto/counts.tsv'
    run:
        def load_abundances(abund_file):
            sid = abund_file.split('/')[-2]
            abund = pd.read_csv(abund_file, sep='\t')
            abund = abund[[col for col in abund.columns if col != 'eff_length']]
            abund.rename(columns={'est_counts': '%s_est_counts' % sid,
                                  'tpm': '%s_tpm' % sid},
                                  inplace=True)
            return abund

        abund_list = [load_abundances(abund_file) for abund_file in input.abundances]
        abunds = abund_list[0]
        MERGE_ATTRS = ['target_id', 'length']
        for abund in abund_list[1:]:
            abunds = abunds.merge(how='outer', right=abund,
                                  left_on=MERGE_ATTRS, right_on=MERGE_ATTRS)

        abunds.fillna(0, inplace=True)
        est_cols = [col for col in abunds.columns if col.endswith('_est_counts')]
        tpm_cols = [col for col in abunds.columns if col.endswith('_tpm')]

        tpms = abunds[[col for col in abunds.columns if not col in est_cols]]
        tpms.rename(columns={col: col[:col.rfind('_tpm')] for col in tpm_cols}, inplace=True)
        tpms.to_csv(output.tpm, sep='\t', index=None)

        ests = abunds[[col for col in abunds.columns if not col in tpm_cols]]
        ests.rename(columns={col: col[:col.rfind('_est_counts')] for col in est_cols}, inplace=True)
        ests.to_csv(output.est, sep='\t', index=None)

        os.symlink(os.path.basename(output.tpm), output.aggregate)


rule kallisto_remap_transcripts_trinity:
    input:
        fasta = 'trinity-{design}/contigs.fa',
        index = 'trinity-{design}/contigs.idx',
        design = 'description/design/{design}.tsv',
        fastqs = fastqs_from_design
    output:
        abundance = 'trinity-{design}/kallisto/{sample}/abundance.tsv'
    params:
        outdir = 'trinity-{design}/kallisto/{sample}',
        bootstrap_samples = config['kallisto']['bootstrap_samples']
    log:
        'trinity-{design}/kallisto/{sample}/kallisto.log'
    threads:
        int(config['threads'])
    shell:
        '''
        kallisto quant \
            --index {input.index} \
            --output-dir {params.outdir} \
            --bootstrap-samples {params.bootstrap_samples} \
            --threads {threads} \
            {input.fastqs}
        '''


rule kallisto_prepare_index:
    input:
        fasta = '{fasta}.fa'
    output:
        index = '{fasta}.idx'
    shell:
        '''
        kallisto index \
            --index {output.index} \
            {input.fasta}
        '''