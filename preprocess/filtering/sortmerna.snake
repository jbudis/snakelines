rule sortmerna_interleave_paired_reads:
    input:
        r1 = 'reads/%s/{sample}_R1.fastq' % config['sortmerna']['read_type'],
        r2 = 'reads/%s/{sample}_R2.fastq' % config['sortmerna']['read_type']
    output:
        rl = 'reads/%s/{sample}_RL.fastq' % config['sortmerna']['read_type']
    shell:
        '''
        sortmerna_merge-paired-reads \
            {input.r1} \
            {input.r2} \
            {output.rl}
        '''

rule sortmerna_index:
    input:
        ref = 'reference/{reference}/{reference}.fa'
    output:
        index = 'reference/{reference}/sortmerna/{reference}.idx.stats'
    params:
        tmpdir = 'reference/{reference}/sortmerna'
    shell:
        '''
        sortmerna_index \
            --ref {input.ref},{output.index} \
            --tmpdir {params.tmpdir}
        '''


rule sortmerna_filter_reads:
    input:
        rl = 'reads/%s/{sample}_RL.fastq' % config['sortmerna']['read_type'],
        ref = 'reference/{reference}/{reference}.fa',
        index = 'reference/{reference}/sortmerna/{reference}.idx.stats'
    output:
        rl = 'reads/sortmerna-{reference}/{sample}_RL.fastq'
    params:
        prefix = 'reads/sortmerna-{reference}/{sample}',
        index_prefix = 'reference/{reference}/sortmerna/{reference}.idx',
        output_prefix = 'reads/sortmerna-{reference}/{sample}_RL'
    shell:
        '''
        sortmerna \
            --ref {input.ref},{params.index_prefix} \
            --reads {input.rl} \
            --aligned {params.output_prefix} \
            --fastx \
            --paired_in
        '''


rule sortmerna_uninterleave_paired_reads:
    input:
        rl = 'reads/sortmerna-{reference}/{sample}_RL.fastq'
    output:
        r1 = 'reads/sortmerna-{reference}/{sample}_R1.fastq.gz',
        r2 = 'reads/sortmerna-{reference}/{sample}_R2.fastq.gz'
    params:
        r1 = 'reads/sortmerna-{reference}/{sample}_R1.fastq',
        r2 = 'reads/sortmerna-{reference}/{sample}_R2.fastq'
    shell:
        '''
        sortmerna_unmerge-paired-reads \
            {input.rl} \
            {params.r1} \
            {params.r2}

        gzip {params.r1}
        gzip {params.r2}
        '''


#    log:
#        'reads/sortmerna-{reference}/log/filter.log',
#    params:
#        indices = ['reference/%s/bowtie2_index/%s' % (ref, ref) for ref in config['prefilter']['references']],
#        keep_param = '--al-conc-gz' if 'keep' in config['prefilter'] and config['prefilter']['keep'] else '--un-conc-gz'
#    threads:
#        int(config['threads'])
#    shell:
#        '''
#        R1_IN={input.r1}
#        R2_IN={input.r2}
#
#        for INDEX in {params.indices}; do
#
#            REF=`basename $INDEX`
#            REF_DIR=reads/filtered-$REF
#            mkdir -p $REF_DIR
#
#            R1_OUT=$REF_DIR/{wildcards.sample}_R1.fastq.gz
#            R2_OUT=$REF_DIR/{wildcards.sample}_R2.fastq.gz
#            R_MASK=$REF_DIR/{wildcards.sample}_R%.fastq.gz
#
#            bowtie2 \
#                -x $INDEX \
#                -1 $R1_IN \
#                -2 $R2_IN \
#                --very-sensitive \
#                --threads {threads} \
#                {params.keep_param} $R_MASK \
#            > /dev/null \
#            2> $REF_DIR/{wildcards.sample}.log
#
#            R1_IN=$R1_OUT
#            R2_IN=$R2_OUT
#        done
#
#        mv $R1_OUT {output.r1}
#        mv $R2_OUT {output.r2}
#        '''