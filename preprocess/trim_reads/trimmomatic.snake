read_type = config['trim']['read_type']
temporary = config['trim'].get('temporary', False)

def configured_temp(outfile):
    return temp(outfile) if temporary else outfile

rule trimmomatic_trim_reads:
    input:
        r1 = 'reads/%s/{sample}_R1.fastq.gz' % read_type,
        r2 = 'reads/%s/{sample}_R2.fastq.gz' % read_type
    output:
        r1 = configured_temp('reads/trimmed/{sample}_R1.fastq.gz'),
        r2 = configured_temp('reads/trimmed/{sample}_R2.fastq.gz')
    params:
        r1 = 'reads/trimmed/{sample}_R1.fastq',
        r2 = 'reads/trimmed/{sample}_R2.fastq',
        out1 = 'reads/trimmed/{sample}_R1.txt',
        out2 = 'reads/trimmed/{sample}_R2.txt',
        adapter = 'ILLUMINACLIP:%s:%s:%s:%s' % (config['trim']['adapter']['fasta'],
                                                config['trim']['adapter']['seed_mismatches'],
                                                config['trim']['adapter']['palindrom_threshold'],
                                                config['trim']['adapter']['clip_threshold']) \
                   if 'adapter' in config['trim'] else '',
        quality = 'SLIDINGWINDOW:5:%s' % config['trim']['quality'] if 'quality' in config['trim'] else '',
        headcrop = 'HEADCROP:%s' % config['trim']['headcrop'] if 'headcrop' in config['trim'] else '',
        crop = 'CROP:%s' % config['trim']['crop'] if 'crop' in config['trim'] else '',
        auto = 'True' if ('auto' in config['trim']) and (config['trim']['auto']) else 'False',
    threads:
        int(config['threads'])
    log:
        'reads/%s/log/{sample}.log' % read_type
    shell:
        '''
        if [ "{params.auto}" = "True" ]; then
            gzip -cd {input.r1} > {params.r1}
            gzip -cd {input.r2} > {params.r2}

            R1_TRIM=`find_trim_params {params.r1} {params.out1}`
            R2_TRIM=`find_trim_params {params.r2} {params.out2}`

            R1_TRIM_HEAD=`echo "$R1_TRIM" | cut -f1`
            R1_TRIM_TAIL=`echo "$R1_TRIM" | cut -f2`

            R2_TRIM_HEAD=`echo "$R2_TRIM" | cut -f1`
            R2_TRIM_TAIL=`echo "$R2_TRIM" | cut -f2`

            TRIM_HEAD=$(( $R1_TRIM_HEAD > $R2_TRIM_HEAD ? $R1_TRIM_HEAD : $R2_TRIM_HEAD ))
            TRIM_TAIL=$(( $R1_TRIM_TAIL < $R2_TRIM_TAIL ? $R1_TRIM_TAIL : $R2_TRIM_TAIL ))

            echo -e "Trimming parameters set for: CROP:$TRIM_TAIL HEADCROP:$TRIM_HEAD"

            trimmomatic PE \
                -threads {threads} \
                -phred33 \
                {input.r1} \
                {input.r2} \
                {output.r1} /dev/null \
                {output.r2} /dev/null \
                {params.adapter} \
                CROP:$TRIM_TAIL \
                HEADCROP:$TRIM_HEAD \
                {params.quality} \
                MINLEN:{config[trim][minlen]} \
            > {log}
        else
            trimmomatic PE \
                -threads {threads} \
                -phred33 \
                {input.r1} \
                {input.r2} \
                {output.r1} /dev/null \
                {output.r2} /dev/null \
                {params.adapter} \
                {params.crop} \
                {params.headcrop} \
                {params.quality} \
                MINLEN:{config[trim][minlen]} \
            > {log}
        fi
        '''

