configfile: srcdir('config.yaml')

pipeline = glob_wildcards('reads/original/{sample,%s}_R1.fastq.gz' % config['sample_pattern'])

include: config['snakelines_dir'] + '/rules/preprocess/report/fastqc.snake'
include: config['snakelines_dir'] + '/rules/preprocess/trim_reads/trimmomatic.snake'
include: config['snakelines_dir'] + '/rules/preprocess/deduplication/fastuniq.snake'
include: config['snakelines_dir'] + '/rules/assembly/assemblers/trinity.snake'
include: config['snakelines_dir'] + '/rules/classification/classifiers/blast.snake'
include: config['snakelines_dir'] + '/rules/classification/report/fasta_summary.snake'
include: config['snakelines_dir'] + '/rules/transcript/quantifiers/kallisto.snake'
include: config['snakelines_dir'] + '/rules/transcript/report/abundances.snake'

design = config['trinity']['design']

rule process:
    input:
        # FastQC summaries
        'reads/original/stats/summary.html',
        'reads/trimmed/stats/summary.html',
        'reads/deduplicated/stats/summary.html',

        # Contigs
        expand('trinity-{design}/contigs.fa',
                design=design),

        # Annotations for contigs
        expand('trinity-{design}/blast/contigs.html',
                design=design) if config['blast']['enabled'] else [],

        # Read quantification
        expand('trinity-{design}/kallisto/abundance.tsv',
                design=design),

        # HTML report
        expand('trinity-{design}/kallisto/contigs.html',
                design=design)