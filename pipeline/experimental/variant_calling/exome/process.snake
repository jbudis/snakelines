configfile: srcdir('config.yaml')

pipeline = glob_wildcards('reads/original/{sample,%s}_R1.fastq.gz' % config['sample_pattern'])

include: config['snake_dir'] + '/preprocess/report/fastqc.snake'
include: config['snake_dir'] + '/preprocess/trim_reads/trimmomatic.snake'
include: config['snake_dir'] + '/mapping/mappers/bowtie2.snake'
include: config['snake_dir'] + '/mapping/postprocess/bam_index.snake'
include: config['snake_dir'] + '/mapping/postprocess/read_group/custom.snake'
include: config['snake_dir'] + '/mapping/postprocess/deduplication/picard.snake'
include: config['snake_dir'] + '/mapping/postprocess/realignment/gatk.snake'
include: config['snake_dir'] + '/mapping/report/qualimap.snake'
include: config['snake_dir'] + '/variant/callers/vardict.snake'

reference = config['mapping']['reference']
panel = config['variant']['panel']

rule process:
    input:
        # Fastq quality control reports
        'reads/original/stats/summary.html',
        'reads/trimmed/stats/summary.html',

        # BAM files
        expand('bowtie2/{reference}/realign/{sample}.bam',
                reference=reference, sample=pipeline.sample),

        # Qualimap reports
        'bowtie2/{reference}/stats-{panel}/summary.tsv'.format(
                reference=reference, panel=panel),

        # Variant files
        expand('bowtie2/{reference}/vardict-{panel}/{sample}.germline.vcf',
                reference=reference, sample=pipeline.sample, panel=panel),

