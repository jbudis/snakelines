# Load configuration file
configfile: srcdir('config.yaml')

# Run startup scripts that automatically loads imports from src/ and load helper methods
include: config['snakelines_dir'] + '/src/snakelines.snake'

# Import sub-workflows
include: srcdir('Snakefile.read_quality_report')
include: srcdir('Snakefile.preprocess')

# Which taxonomic levels should be extracted in separate tables
tax_levels_count_table = \
    extract_from_config(config, ['classification', 'report', 'taxonomic_counts', 'count_table', 'tax_levels'], [])

tax_levels_count_table.append('alltaxes')

# Which taxonomic levels should be visualised in barplots, and in which image formats
tax_levels_barplot = \
    extract_from_config(config, ['classification', 'report', 'taxonomic_counts', 'barplot', 'tax_levels'], [])
barplot_formats = \
    extract_from_config(config, ['classification', 'report', 'taxonomic_counts', 'barplot', 'formats'], ['png'])

rule finalise__classify_reads_reference_based:
    """
    Pipeline classify preprocess reads against chosen reference sequences. According to their taxonomic labels,
    number of reads per taxonomic units are summarized into graphical and tabular reports.
    :input kronas: interactive multi-level pie plots of taxonomic counts
    :input tables: summary tables with number and proportions of reads mapped to taxonomic units
    :input barplots: barplots with number and proportions of reads mapped to taxonomic units
    :output kronas: interactive multi-level pie plots of taxonomic counts (in the report directory)
    :output tables: summary tables with number and proportions of reads mapped to taxonomic units (in the report directory)
    :output barplots: barplots with number and proportions of reads mapped to taxonomic units (in the report directory)
    """
    input:
        rules.finalise__quality_report.output,
        rules.finalise__preprocess_reads.output,

        kronas = expand('classification/{reference}/report/krona/taxonomic_counts.html',
                         reference=pipeline.references),

        tables = expand('classification/{reference}/report/tsv/{tax_level}.{type}.tsv',
                         reference=pipeline.references, tax_level=tax_levels_count_table,
                         type=['counts', 'ratios']),

        barplots = expand('classification/{reference}/report/figures/{tax_level}.{type}.{format}',
                           reference=pipeline.references, tax_level=tax_levels_barplot,
                           type=['counts', 'ratios'], format=barplot_formats),

    output:
        kronas = expand('{report_dir}/{reference}/krona/taxonomic_counts.html',
                         report_dir=config['report_dir'], reference=pipeline.references),

        tables = expand('{report_dir}/{reference}/tsv/{tax_level}.{type}.tsv',
                         report_dir=config['report_dir'],
                         reference=pipeline.references, tax_level=tax_levels_count_table,
                         type=['counts', 'ratios']),

        barplots = expand('{report_dir}/{reference}/figures/{tax_level}.{type}.{format}',
                           report_dir=config['report_dir'],
                           reference=pipeline.references, tax_level=tax_levels_barplot,
                           type=['counts', 'ratios'], format=barplot_formats)

    run:
        copy_input_files_with_consistent_output_names(input, output)

# Target rule would be executed locally, not on cluster
localrules: finalise__classify_reads_reference_based