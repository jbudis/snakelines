# Load configuration file
configfile: srcdir('config.yaml')

# Run startup scripts that automatically loads imports from src/ and load helper methods
include: config['snakelines_dir'] + '/src/snakelines.snake'

# Import sub-workflows
include: srcdir('Snakefile.read_quality_report')
include: srcdir('Snakefile.preprocess')

# Find in configuration map post-process types for which should be report generated
map_types_with_quality_report = extract_from_config(['mapping', 'report', 'quality_report', 'map_types'], [])

# References with at least 2 samples
multisample_references = [reference for reference in pipeline.references if len(pipeline.samples_for(reference)) > 1]

# TODO allow to change panels
# TODO this pipeline could produce also barplots and krona plots, when reference contains .tax files

rule finalise__map_reads_to_reference:
    """
    Pipeline maps preprocessed reads to the selected reference sequences. Mapped reads in bam files
    are further processed - sorting, deduplication, realignment... Final mapping statistics and quality
    reports are generated in the end.
    :input alignments: mapped sorted reads in BAM file (.bam) (for each of the sample references and map types)
    :input bam_indices: BAM file indices (.bam.bai)
    :input quality_reports: mapping statistics retrieved from BAM file (.pdf)
    :input summary_report: aggregated mapping statistics (.pdf)
    :output quality_reports: mapping statistics retrieved from BAM file (.pdf) (in the report directory)
    :output summary_report: aggregated mapping statistics (.pdf) (in the report directory)
    """
    input:
        rules.finalise__quality_report.output,
        rules.finalise__preprocess_reads.output,

        alignments = expand('mapping/{sr.reference}/{map_type}/{sr.sample}.bam',
                             sr=pipeline.sample_references, map_type=pipeline.postprocessed_map_type),

        bam_indices = expand('mapping/{sr.reference}/{map_type}/{sr.sample}.bam.bai',
                              sr=pipeline.sample_references, map_type=pipeline.postprocessed_map_type),

        quality_reports = expand('mapping/{sr.reference}/{map_type}/stats-wgs/samples/{sr.sample}/report.pdf',
                                  sr=pipeline.sample_references, map_type=pipeline.postprocessed_map_type),

        summary_report = expand('mapping/{reference}/{map_type}/stats-wgs/summary/report.pdf',
                                 reference=multisample_references, map_type=pipeline.postprocessed_map_type),

    output:
        quality_reports = expand('{report_dir}/{sr.reference}/samples/{sr.sample}/mapping_quality.pdf',
                                  report_dir=config['report_dir'], sr=pipeline.sample_references),

        summary_report = expand('{report_dir}/{reference}/summary/mapping_quality.pdf',
                                 report_dir=config['report_dir'], reference=multisample_references),

    run:
        copy_input_files_with_consistent_output_names(input, output)

# Target rule would be executed locally, not on cluster
localrules: finalise__map_reads_to_reference