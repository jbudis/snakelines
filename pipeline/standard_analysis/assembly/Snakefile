# Load configuration file
configfile: srcdir('config.yaml')

# Run startup scripts that automatically loads imports from src/ and load helper methods
include: config['snakelines_dir'] + '/src/snakelines.snake'

# Import sub-workflows
include: config['snakelines_dir'] + '/pipeline/standard_analysis/read_quality_report/Snakefile.rule'
include: config['snakelines_dir'] + '/pipeline/standard_analysis/preprocess/Snakefile.rule'

rule finalise__assemble_reads:
    """
    Pipeline filter and revise fastq files from the reads/original directory. All preprocess steps, such as trimming,
    deduplication and filtering of contamination reads are defined in the configuration file, part 'preprocess'.
    Preprocess steps are executed gradually, i.e. output reads of one step are input to the following step.
    :input contigs: assembled contigs in Fasta format
    :input overlap_graphs: contig overlap graph
    :input quality_reports: quality control metrics of assembled contigs
    :output overlap_graphs: contig overlap graph (in the report directory)
    :output quality_reports: quality control metrics of assembled contigs (in the report directory)
    """
    input:
        rules.finalise__quality_report.output,
        rules.finalise__preprocess_reads.output,

        contigs = expand('assembly/{sample}/contigs.fa', sample=pipeline.samples),

        overlap_graphs = expand('assembly/{sample}/assembly_graph.svg', sample=pipeline.samples),

        quality_reports = expand('assembly/{sample}/quality_report/report.pdf', sample=pipeline.samples),

    output:
        overlap_graphs = expand('{report_dir}/assembly/{sample}/contigs.svg',
                                 report_dir=config['report_dir'], sample=pipeline.samples),

        quality_reports = expand('{report_dir}/assembly/{sample}/report.pdf',
                                  report_dir=config['report_dir'], sample=pipeline.samples),

    run:
        copy_input_files_with_consistent_output_names(input, output)

# Target rule would be executed locally, not on cluster
localrules: finalise__assemble_reads