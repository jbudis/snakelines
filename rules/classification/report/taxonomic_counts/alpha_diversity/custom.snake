import pandas as pd
import skbio
import numpy as np

tax_ranks = ['kingdom', 'phylum', 'class', 'order', 'family',
             'genus', 'species', 'subspecies', 'subsubspecies', 'variety', 'form']

rule custom__alpha_diversity:
    """
    Compute aplha diversity at selected taxonomic level, such as genus, species.
    :input tax_level_abs: Aggregated counts for single taxonomic level, e.g. species, order
    :output alpha_div: Alpha diversities for single taxonomic level, e.g. species, order
    """
    input:
        tax_level_abs = '{analysis_dir}/{reference}/report/tsv/{tax_level, %s}.counts.tsv' % ('|'.join(tax_ranks[:-1])),
    output:
        alpha_div = '{analysis_dir}/{reference}/report/tsv/{tax_level, %s}.alpha_div.tsv' % ('|'.join(tax_ranks[:-1])),
    run:
        # read the dataframe
        taxons = pd.DataFrame.from_csv(input.tax_level_abs, sep='\t', index_col=None)
        taxons = taxons.fillna('')

        # correct the dataframe and transpose it
        taxa_to_merge = list(filter(lambda x: x in taxons.columns, tax_ranks))
        taxons['taxa'] = taxons[taxa_to_merge].apply(lambda x: '|'.join(x).strip('|'), axis=1)
        taxons = taxons.drop(taxa_to_merge, axis=1)
        taxons = taxons.set_index('taxa')
        taxons = taxons.transpose()

        # join duplicates:
        taxons2 = pd.DataFrame(0, index=taxons.index, columns=[])
        for name, value in taxons.items():
            if name in taxons2.columns:
                taxons2[name] += value
            else:
                taxons2[name] = value
        taxons = taxons2

        # drop Unclassified
        taxons = taxons.drop(filter(lambda x: x.startswith("Unclassified"), taxons.columns), axis=1)

        # correct empty values:
        taxons = taxons.apply(lambda x: pd.to_numeric(x, errors='coerce')).fillna(0.0)

        # collect diversities
        diversities = skbio.diversity.get_alpha_diversity_metrics()
        skip_diversity = ['faith_pd', 'lladser_ci', 'kempton_taylor_q', 'michaelis_menten_fit', 'goods_coverage', 'ace', 'chao1_ci', 'esty_ci', 'osd']
        diversities = list(filter(lambda x: x not in skip_diversity, diversities))

        # gather "good" columns
        #count_cols = [col for col in taxons.columns if col.startswith('Bacteria') or col.startswith('Eukaryota')]
        count_cols = taxons.columns

        # apply diversities:
        for metric in diversities:
            taxons['alpha_' + metric] = [0.0] * len(taxons.index)

        for metric in diversities:
            for i in taxons.index:
                suma = sum(taxons[count_cols].loc[i])
                if suma == 0:
                    taxons.set_value(i, 'alpha_' + metric, float('nan'))
                    continue
                cnts = (np.array(taxons[count_cols].loc[i])).astype('int64')
                ad = skbio.diversity.alpha_diversity(metric, cnts)
                taxons.set_value(i, 'alpha_' + metric, ad)

        # create table and print it
        div_columns = list(map(lambda x: 'alpha_'+x, diversities))
        alphas = taxons[div_columns]
        alphas.to_csv(output.alpha_div, sep='\t')
