include: config['snakelines_dir'] + '/rules/mapping/index/samtools.snake'
include: config['snakelines_dir'] + '/rules/reference/index/fai/samtools.snake'

rule vardict__create_wgs_bed_file:
    '''
    Creates bed file with whole genomic regions in reference fasta file. Simple way to unite WGS and panel analysis.
    '''
    input:
        fai = 'reference/{reference}/{reference}.fa.fai'
    output:
        bed = 'reference/{reference}/annotation/wgs/regions.bed'
    shell:
          '''
        awk \
            '{{print $1, 1, $2, $1}}' \
      {input.fai} \
              | sed \
              's/ /\t/g' \
              > {output.bed}
              '''

rule vardict__prepare_bed_file:
    '''
    Vardict throws error for bed files with more than 4 columns, rule therefore cut other columns
    '''
    input:
        bed = 'reference/{reference}/annotation/{panel}/regions.bed',
    output:
        bed = 'reference/{reference}/annotation/{panel}/regions.vardict.bed',
    shell:
        '''
        cut -f 1-4 {input.bed} > {output.bed}
        '''

# TODO variants should ve stored in original/ folder
rule vardict__call_germline_variants:
    '''
    Identify small variation (SNP and indels) from the mapped reads.
    '''
    input:
        bam      = 'mapping/{reference}/deduplicated/{sample}.bam',
        bai      = 'mapping/{reference}/deduplicated/{sample}.bam.bai',
        bed      = 'reference/{reference}/annotation/{panel}/regions.vardict.bed',
        reffasta = 'reference/{reference}/{reference}.fa',
        reffaidx = 'reference/{reference}/{reference}.fa.fai'
    output:
        vdc = temp('variant/{reference}-{panel}/{state}/{sample}.vdc')
    log:
        err      = 'variant/{reference}-{panel}/{state}/log/{sample}.vdc.err'
    params:
        min_nonref_allele_freq = method_config.get('hard_filter', {}).get('min_nonref_allele_freq', 0.05),
        min_alternate_count    = method_config.get('hard_filter', {}).get('min_alternate_count', 2),
        min_map_quality        = method_config.get('hard_filter', {}).get('min_map_quality', 15)
    threads:
        int(config['threads'])
    shell:
        '''
        vardictjava \
            -G {input.reffasta} \
            -b {input.bam} \
            -f {params.min_nonref_allele_freq} \
            -r {params.min_alternate_count} \
            -Q {params.min_map_quality} \
            -th {threads} \
            -c 1 \
            -S 2 \
            -E 3 \
            -g 4 \
            {input.bed} \
        >  {output.vdc} \
        2> {log.err}
        '''

# TODO hardcoded path
rule vardict__test_strand_bias:
    '''
    Perform statistical testing of strand bias.
    '''
    input:
        vdc = 'variant/{reference}-{panel}/{state}/{sample}.vdc'
    output:
        tsb = temp('variant/{reference}-{panel}/{state}/{sample}.tsb')
    log:
        err = 'variant/{reference}-{panel}/{state}/log/{sample}.test_strand_bias.err'
    shell:
        '''
        BIAS_SCRIPT=/usr/local/tools/vardict-1.5.1/VarDict/teststrandbias.R

        cat {input.vdc} \
        | $BIAS_SCRIPT \
        >  {output.tsb} \
        2> {log.err}
        '''

# TODO hardcoded path
rule vardict__tsb_to_vcf:
    '''
    Convert intermediate files of Vardict to VCF format
    '''
    input:
        tsb = 'variant/{reference}-{panel}/{state}/{sample}.tsb'
    output:
        vcf = temp('variant/{reference}-{panel}/{state}/{sample}.vardict.vcf')
    params:
        min_mean_base_quality  = method_config.get('soft_filter', {}).get('min_mean_base_quality', 20),
        min_map_quality        = method_config.get('soft_filter', {}).get('min_map_quality', 20),
        read_depth             = method_config.get('soft_filter', {}).get('read_depth', 10),
        min_nonref_allele_freq = method_config.get('soft_filter', {}).get('min_nonref_allele_freq', 0.2)
    shell:
        '''
        /usr/local/tools/vardict-1.5.1/VarDict/var2vcf_valid.pl \
            -S \
            -A \
            -q {params.min_mean_base_quality} \
            -Q {params.min_map_quality} \
            -d {params.read_depth} \
            -f {params.min_nonref_allele_freq}  \
            -N {wildcards.sample} \
            {input} \
        > {output}
        '''