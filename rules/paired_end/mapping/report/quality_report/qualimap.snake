import pandas as pd
import os

rule qualimap__mapping_quality_report_across_reference:
    """
    Generate summary statistics for mapped reads stored in BAM files. Statistics are calculated across
    whole reference genome.
    :input bam: Mapped reads in bam format
    :input bai: Index to mapped reads for enable fast read retrieval from desired genomic region
    :output html: Quality report of mapped reads in HTML format
    :output pdf: Quality report of mapped reads in PDF format
    :output text: Quality report of mapped reads in format suitable for automated processing
    :params outdir: Directory with output reports
    """
    input:
        bam = '{mapper}/{reference}/{map_type}/{sample}.bam',
        bai = '{mapper}/{reference}/{map_type}/{sample}.bam.bai'
    output:
        html     = '{mapper}/{reference}/{map_type}/stats-wgs/samples/{sample}/qualimapReport.html',
        pdf      = '{mapper}/{reference}/{map_type}/stats-wgs/samples/{sample}/report.pdf',
        text     = '{mapper}/{reference}/{map_type}/stats-wgs/samples/{sample}/genome_results.txt',
        cov_hist = '{mapper}/{reference}/{map_type}/stats-wgs/samples/{sample}/raw_data_qualimapReport/coverage_histogram.txt', # consumed by multiqc
        ins_hist = '{mapper}/{reference}/{map_type}/stats-wgs/samples/{sample}/raw_data_qualimapReport/insert_size_histogram.txt', # consumed by multiqc
        frac_gen = '{mapper}/{reference}/{map_type}/stats-wgs/samples/{sample}/raw_data_qualimapReport/genome_fraction_coverage.txt', # consumed by multiqc
        qc_dist  = '{mapper}/{reference}/{map_type}/stats-wgs/samples/{sample}/raw_data_qualimapReport/mapped_reads_gc-content_distribution.txt' # consumed by multiqc
    params:
        outdir = '{mapper}/{reference}/{map_type}/stats-wgs/samples/{sample}'
    threads:
        int(config['threads'])
    log:
        out    = '{mapper}/{reference}/{map_type}/stats-wgs/samples/{sample}/log/analysis.log',
        err    = '{mapper}/{reference}/{map_type}/stats-wgs/samples/{sample}/log/analysis.err',
    conda:
        config['snakelines_dir'] + '/environments/qualimap.yaml'
    shell:
        """
        unset DISPLAY
        qualimap bamqc \
            --java-mem-size=100G \
            -bam {input.bam} \
            --paint-chromosome-limits \
            -outdir {params.outdir} \
            -outformat PDF:HTML \
            -nt {threads} \
        >  {log.out} \
        2> {log.err}
        """

# TODO validate if this rule is working
rule qualimap__mapping_quality_report_across_panel:
    """
    Generate summary statistics for mapped reads stored in BAM files. Statistics are calculated across
    genomic regions specified in the BED file.
    :input bam: Mapped reads in bam format
    :input bai: Index to mapped reads for enable fast read retrieval from desired genomic region
    :input bed: Genomic regions of interest in bed format
    :output html: Quality report of mapped reads in HTML format
    :output pdf: Quality report of mapped reads in PDF format
    :output text: Quality report of mapped reads in format suitable for automated processing
    :params outdir: Directory with output reports
    """
    input:
        bam    = '{mapper}/{reference}/{map_type}/{sample}.bam',
        bai    = '{mapper}/{reference}/{map_type}/{sample}.bam.bai',
        bed    = 'reference/{reference}/annotation/{panel}/regions.bed'
    output:
        html     = '{mapper}/{reference}/{map_type}/stats-{panel}/samples/{sample}/qualimapReport.html',
        pdf      = '{mapper}/{reference}/{map_type}/stats-{panel}/samples/{sample}/report.pdf',
        text     = '{mapper}/{reference}/{map_type}/stats-{panel}/samples/{sample}/genome_results.txt',
        cov_hist = '{mapper}/{reference}/{map_type}/stats-{panel}/samples/{sample}/raw_data_qualimapReport/coverage_histogram.txt', # consumed by multiqc
        ins_hist = '{mapper}/{reference}/{map_type}/stats-{panel}/samples/{sample}/raw_data_qualimapReport/insert_size_histogram.txt', # consumed by multiqc
        frac_gen = '{mapper}/{reference}/{map_type}/stats-{panel}/samples/{sample}/raw_data_qualimapReport/genome_fraction_coverage.txt', # consumed by multiqc
        qc_dist  = '{mapper}/{reference}/{map_type}/stats-{panel}/samples/{sample}/raw_data_qualimapReport/mapped_reads_gc-content_distribution.txt' # consumed by multiqc
    params:
        outdir = '{mapper}/{reference}/{map_type}/stats-{panel}/samples/{sample}'
    threads:
        int(config['threads'])
    log:
        out    = '{mapper}/{reference}/{map_type}/stats-{panel}/samples/{sample}/log/analysis.log',
        err    = '{mapper}/{reference}/{map_type}/stats-{panel}/samples/{sample}/log/analysis.err',
    conda:
        config['snakelines_dir'] + '/environments/qualimap.yaml'
    shell:
        """
        unset DISPLAY
        qualimap bamqc \
            --java-mem-size=100G \
            -bam {input.bam} \
            --feature-file {input.bed} \
            -outdir {params.outdir} \
            -outformat PDF:HTML \
            -nt {threads} \
        >  {log.out} \
        2> {log.err}
        """

# TODO there could be a description file that would split bam files into categories
def qualimap_pdf_reports(wildcards):
    """
    Pdf qualimap report files for all samples of a reference from the path
    """
    return expand(
        '{mapper}/{reference}/{map_type}/stats-{panel}/samples/{sample}/report.pdf',
        mapper=wildcards.mapper,
        reference=wildcards.reference,
        map_type=wildcards.map_type,
        panel=wildcards.panel,
        sample=pipeline.samples_for(wildcards.reference)
    )

rule qualimap__summarize_quality_reports:
    """
    Aggregate results from individual bamqc results to a single summary report
    :input reports: List of pdf qualimap reports to aggregate
    :output html: Aggregated quality report of mapped reads in HTML format
    :output pdf: Aggregated quality report of mapped reads in PDF format
    :params sample_list: Auxiliary file that would be generated with names and paths to individual sample reports
    :params out_dir: Directory, where output reports would be generated
    """
    input:
        reports     = qualimap_pdf_reports
    output:
        html        = '{mapper}/{reference}/{map_type}/stats-{panel}/summary/multisampleBamQcReport.html',
        pdf         = '{mapper}/{reference}/{map_type}/stats-{panel}/summary/report.pdf',
    params:
        sample_list = '{report_dir}/_summary/mapping_quality/sample.list'.format(report_dir=config['report_dir']),
        out_dir     = '{mapper}/{reference}/{map_type}/stats-{panel}/summary'
    log:
        out         = '{mapper}/{reference}/{map_type}/stats-{panel}/summary/log/analysis.log',
        err         = '{mapper}/{reference}/{map_type}/stats-{panel}/summary/log/analysis.err',
    conda:
        config['snakelines_dir'] + '/environments/qualimap.yaml'
    shell:
        """
        unset DISPLAY
        # Prepare sample list file for the qualimap
        ## Column1: Sample name
        ## Column2: Path to precomputed bamqc report

        rm -f "{params.sample_list}"
        mkdir -p $(dirname "{params.sample_list}")

        for REPORT in {input.reports}; do
            REPORT_DIR=`dirname $REPORT`
            SAMPLE=`basename $REPORT_DIR`
            echo -e "$SAMPLE\t$REPORT_DIR" >> {params.sample_list}
        done

        # Run qualimap on samples specified in sample list
        qualimap multi-bamqc \
            -d {params.sample_list} \
            -outdir {params.out_dir} \
            -outformat PDF:HTML \
        >  {log.out} \
        2> {log.err}
        """

ruleorder: qualimap__mapping_quality_report_across_reference > qualimap__mapping_quality_report_across_panel
