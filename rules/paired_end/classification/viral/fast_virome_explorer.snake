import shutil
import pandas as pd

read_type = config['fast_virome_explorer']['read_type']
kmer_size = config['fast_virome_explorer']['kmer_size']

rule fast_virome_explorer__estimate_virome_composition:
    input:
        r1 = 'reads/%s/{sample}_R1.fastq.gz' % read_type,
        r2 = 'reads/%s/{sample}_R2.fastq.gz' % read_type,
        index = 'reference/{reference}/kallisto_index/{reference}-kallisto-index-k%s.idx' % kmer_size,
        ref_lens = 'reference/{reference}/kallisto_index/{reference}.lens.txt'
    output:
        composition = 'fast_virome_explorer/{reference}/classification/{sample}/FastViromeExplorer-final-sorted-abundance.tsv'
    log:
        out = 'fast_virome_explorer/{reference}/classification/{sample}/log/{sample}.log',
        err = 'fast_virome_explorer/{reference}/classification/{sample}/log/{sample}.err'
    params:
        outdir = 'fast_virome_explorer/{reference}/classification/{sample}'
    conda:
        config['snakelines_dir'] + '/environments/fast-virome-explorer.yaml'
    shell:
        """
        fast_virome_explorer \
            -1 {input.r1} \
            -2 {input.r2} \
            -i {input.index} \
            -o {params.outdir} \
            -l {input.ref_lens} \
         > {log.out} \
        2> {log.err}
        """

rule fast_virome_explorer__convert_to_krona:
    input:
        composition = 'fast_virome_explorer/{reference}/classification/{sample}/FastViromeExplorer-final-sorted-abundance.tsv'
    output:
        krona = 'fast_virome_explorer/{reference}/report/krona/individual/{sample}.krn'
    conda:
        config['snakelines_dir'] + '/environments/fast-virome-explorer.yaml'
    run:
        viruses = pd.read_csv(input.composition, sep='\t', index_col=0)
        with open(output.krona, 'w') as out:
            if len(viruses) > 0:
                tax_column = viruses.columns[1]
                for _, virus in viruses.iterrows():
                    out.write('{abundance}\t{tax}\n'.format(abundance=virus.EstimatedAbundance,
                                                            tax=virus[tax_column].replace(';', '\t')))
            else:
                out.write('1\tNomatch\n')