default_kmer_list = [21, 29, 39, 59, 79, 99, 119, 141]
kmer_list = config \
    .get('assembly', default_kmer_list) \
    .get('assembler', default_kmer_list) \
    .get('kmer', default_kmer_list)

rule megahit__assemble_reads_into_contigs:
    """
    Assemble preprocessed reads into the larger genomic sequences, contigs. Also generate contig overlap graphs and
    initial scaffolds. Use 'megahit' program.
    :input r1: gzipped fastq file with left reads
    :input r2: gzipped fastq file with right reads
    :output contigs: contigs in .fa file
    :output intermediate_contigs: Assembled contigs with k-mer size 99
    :param outdir: output directory (do not change)
    :param contigs: contig file generated by megahit (do not change)
    """
    input:
        r1 = 'reads/%s/{sample}_R1.fastq.gz' % pipeline.preprocessed_read_type,
        r2 = 'reads/%s/{sample}_R2.fastq.gz' % pipeline.preprocessed_read_type
    output:
        contigs              = 'assembly/{sample}/contigs.fa',
        intermediate_contigs = 'assembly/{sample}/intermediate_contigs/k%s.contigs.fa' % min(kmer_list)
    params:
        outdir    = 'assembly/{sample}',
        contigs   = 'assembly/{sample}/temp.contigs.fa',
        kmer_list = ','.join(map(str, kmer_list))
    threads:
        int(config['threads'])
    log:
        out = 'log/assembly/{sample}/megahit.log',
        err = 'log/assembly/{sample}/megahit.err'
    conda:
        config['snakelines_dir'] + '/enviroments/megahit.yaml'
    shell:
        """
        rm -r {params.outdir}

        megahit \
            -1 {input.r1} \
            -2 {input.r2} \
            -o {params.outdir} \
            --num-cpu-threads {threads} \
            --out-prefix temp \
            --k-list {params.kmer_list} \
        1> {log.out} \
        2> {log.err}

        mv {params.contigs} {output.contigs}
        """


rule megahit__generate_contig_graph:
    """
    Create graph with contigs to visually assess complexity of the assembly
    :input intermediate_contigs: Assembled contigs with k-mer size 99
    :output contigs: contigs in .fa file
    :param outdir: output directory (do not change)
    :param contigs: contig file generated by megahit (do not change)
    """
    input:
        intermediate_contigs = 'assembly/{sample}/intermediate_contigs/k%s.contigs.fa' % min(kmer_list)
    output:
        contigs   = 'assembly/{sample}/assembly_graph.fastg'
    params:
        kmer = min(kmer_list)
    threads:
        int(config['threads'])
    log:
        err = 'assembly/{sample}/log/convert_to_fastg.err'
    conda:
        config['snakelines_dir'] + '/enviroments/megahit.yaml'
    shell:
        """
        megahit_toolkit contig2fastg \
            {params.kmer} \
            {input.intermediate_contigs} \
        >  {output.contigs} \
        2> {log.err}
        """


