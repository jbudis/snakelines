rule spades__assemble_reads_into_contigs:
    """
    Assemble preprocessed reads into the larger genomic sequences, contigs. Also generate contig overlap graphs and
    initial scaffolds. Use 'spades' program.
    :input r1: gzipped fastq file with left reads
    :input r2: gzipped fastq file with right reads
    :output fastg: assembled graph in .fastg format
    :output gfa: assembly graph in .gfa format
    :output contigs: contigs in .fa file
    :output scaffolds: scaffolds in .fa file
    :param outdir: output directory (do not change)
    :param contigs: contig file generated by spades (do not change)
    :param scaffolds: scaffolds file generated by spades (do not change)
    :param mode: mode of operation of spades (do not change), extracted from config file
    :param careful: whether to use --careful parameter for spades (do not change), extracted from config file
    """
    input:
        r1 = 'reads/%s/{sample}_R1.fastq.gz' % pipeline.preprocessed_read_type,
        r2 = 'reads/%s/{sample}_R2.fastq.gz' % pipeline.preprocessed_read_type
    output:
        fastg     = 'assembly/{sample}/assembly_graph.fastg',
        gfa       = 'assembly/{sample}/assembly_graph.gfa',
        contigs   = 'assembly/{sample}/contigs.fa',
        scaffolds = 'assembly/{sample}/scaffolds.fa'
    params:
        outdir    = 'assembly/{sample}',
        contigs   = 'assembly/{sample}/contigs.fasta',
        scaffolds = 'assembly/{sample}/scaffolds.fasta',
        mode      = '--{}'.format(method_config['mode']) if method_config.get('mode', 'standard') != 'standard' else '',
        careful   = '--careful' if method_config.get('careful', False) else ''
    threads:
        int(config['threads'])
    log:
        out = 'assembly/{sample}/log/spades.log',
        err = 'assembly/{sample}/log/spades.err'
    conda:
        config['snakelines_dir'] + '/enviroments/spades.yaml'
    shell:
        """
        spades.py \
            -1 {input.r1} \
            -2 {input.r2} \
            -o {params.outdir} \
            --threads {threads} \
            {params.mode} \
            {params.careful} \
        >  {log.out} \
        2> {log.err}

        mv {params.contigs} {output.contigs}
        mv {params.scaffolds} {output.scaffolds}
        """
