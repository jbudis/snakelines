rule trimmomatic__trim_reads:
    """
    Remove low quality ends of reads and then filter reads that are too short.
    :input r1: Left side of sequenced fragments in gzipped fastq format
    :input r2: Right side of sequenced fragments in gzipped fastq format
    :output r1: Left side of subsampled fragments without overlap in gzipped fastq format
    :output r2: Right side of subsampled fragments without overlap in gzipped fastq format
    :params r1: Temporary unzipped left side of sequenced fragments in gzipped fastq format
    :params r2: Temporary unzipped right side of sequenced fragments in gzipped fastq format
    :params adapter: Parameters of Trimmomatic for adapter clipping
    :params quality: Parameters of Trimmomatic for clipping of low quality 3` ends of reads
    :params headcrop: Parameters of Trimmomatic for cutting of pre-selected number of bases from the 5` end of reads
    :params crop: Parameters of Trimmomatic for cutting of pre-selected number of bases from the 3` end of reads
    :params minlen: Parameters of Trimmomatic to remove reads that have lower length after trimming
    """
    input:
        r1 = 'reads/%s/{sample}_R1.fastq.gz' % method_config['input_read_type'],
        r2 = 'reads/%s/{sample}_R2.fastq.gz' % method_config['input_read_type']
    output:
        r1 = configured_temp('reads/trimmed/{sample}_R1.fastq.gz'),
        r2 = configured_temp('reads/trimmed/{sample}_R2.fastq.gz')
    params:
        r1 = 'reads/trimmed/{sample}_R1.fastq',
        r2 = 'reads/trimmed/{sample}_R2.fastq',
        additional = method_config.get('additional_params', ''),
        quality = 'SLIDINGWINDOW:5:%s' % method_config.get('quality', ''),
        headcrop = 'HEADCROP:%s' % method_config.get('headcrop', ''),
        crop = 'CROP:%s' % method_config.get('crop', ''),
        minlen = 'MINLEN:%s' % method_config.get('minlen', ''),
        illuminaclip = 'ILLUMINACLIP:%s' % method_config.get('illuminaclip', ''),
    threads:
        int(config['threads'])
    log:
        out = 'reads/trimmed/log/{sample}.log',
        err = 'reads/trimmed/log/{sample}.err'
    conda:
        config['snakelines_dir'] + '/enviroments/trimmomatic.yaml'
    shell:
        """
        trimmomatic PE \
            -threads {threads} \
            -phred33 \
            {input.r1} \
            {input.r2} \
            {output.r1} /dev/null \
            {output.r2} /dev/null \
            {params.additional} \
            {params.crop} \
            {params.headcrop} \
            {params.quality} \
            {params.minlen} \
            {params.illuminaclip} \
        >  {log.out} \
        2> {log.err}
        """

