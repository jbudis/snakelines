include: config['snakelines_dir'] + '/rules/preprocess/conversion/unzip.snake'

rule pear__join_read_pairs:
    """
    Join paired reads into single end reads based on sequence overlap
    :input r1: Left side of sequenced fragments in fastq format
    :input r2: Right side of sequenced fragments in fastq format
    :output r1: Left side of fragments without overlap in fastq format
    :output r2: Right side of fragments without overlap in fastq format
    :output rm: Paired reads with overlap joined into merged sequences in fastq format
    :params tmp_r1: Temporary generated file, would be immediately renamed to the standardised name
    :params tmp_r2: Temporary generated file, would be immediately renamed to the standardised name
    :params tmp_rm: Temporary generated file, would be immediately renamed to the standardised name
    :params tmp_rd: Temporary generated file, would be immediately removed
    :params outpref: Prefix of generated output files
    """
    input:
        r1 = 'reads/%s/{sample}_R1.fastq' % method_config['read_type'],
        r2 = 'reads/%s/{sample}_R2.fastq' % method_config['read_type']
    output:
        r1 = configured_temp('reads/joined/{sample}_R1.fastq.gz'),
        r2 = configured_temp('reads/joined/{sample}_R2.fastq.gz'),
        rm = configured_temp('reads/joined/{sample}_RM.fastq.gz')
    params:
        tmp_r1 = 'reads/joined/{sample}.unassembled.forward.fastq',
        tmp_r2 = 'reads/joined/{sample}.unassembled.reverse.fastq',
        tmp_rm = 'reads/joined/{sample}.assembled.fastq',
        tmp_rd = 'reads/joined/{sample}.discarded.fastq',
        outpref = 'reads/joined/{sample}'
    threads:
        int(config['threads'])
    log:
        out = 'reads/joined/log/{sample}.log',
        err = 'reads/joined/log/{sample}.err',
    conda:
        config['snakelines_dir'] + '/enviroments/others_env.yaml'
    shell:
        """
        pear \
            --forward-fastq {input.r1} \
            --reverse-fastq {input.r2} \
            --output {params.outpref} \
            --threads {threads} \
        >  {log.out} \
        2> {log.err}

        pigz \
            --processes {threads} \
            {params.tmp_r1} \
            {params.tmp_r2} \
            {params.tmp_rm}

        mv {params.tmp_r1}.gz {output.r1}
        mv {params.tmp_r2}.gz {output.r2}
        mv {params.tmp_rm}.gz {output.rm}

        rm {params.tmp_rd}
        """

# TODO this is not good way how to deal with pair reads without overlap. Concatenate only rm with r1?
rule pear__concat_assembled_and_unassambled:
    """
    Unite joined reads, and reads that could not be joined into a single fastq file
    :input r1: Left side of fragments without overlap in fastq format
    :input r2: Right side of fragments without overlap in fastq format
    :input rm: Paired reads with overlap joined into merged sequences in fastq format
    :output rc: Concatenated file, first goes joined reads and then reads without overlap
    """
    input:
        r1 = 'reads/joined/{sample}_R1.fastq.gz',
        r2 = 'reads/joined/{sample}_R2.fastq.gz',
        rm = 'reads/joined/{sample}_RM.fastq.gz'
    output:
        rc = 'reads/joined/{sample}_RC.fastq.gz'
    conda:
        config['snakelines_dir'] + '/enviroments/others_env.yaml'
    shell:
        """
        cat \
            {input.rm} \
            {input.r1} \
            {input.r2} \
        > {output.rc} \
        """