include: config['snakelines_dir'] + '/rules/shared/reference/annotation/regions.snake'
include: config['snakelines_dir'] + '/rules/shared/reference/index/fai/samtools.snake'
include: config['snakelines_dir'] + '/rules/shared/reference/index/dict/picard.snake'


rule deepvariant__call_germline_variants:
    """
    Variant calling using deep neural network.
    """
    input:
        bam   = 'mapping/{{reference}}/{map_type}/{{sample}}.bam'.format(map_type=pipeline.postprocessed_map_type),
        bai   = 'mapping/{{reference}}/{map_type}/{{sample}}.bam.bai'.format(map_type=pipeline.postprocessed_map_type),
        bed   = 'reference/{reference}/annotation/{panel}/regions.bed',
        fasta = 'reference/{reference}/{reference}.fa',
        fai   = 'reference/{reference}/{reference}.fa.fai',
    output:
        vcf  = 'variant/{reference}-{panel}/original/{sample}.deepvariant.vcf',
        gvcf = 'variant/{reference}-{panel}/original/{sample}.deepvariant.gvcf'
    params:
        model = lambda wildcards: 'WGS' if wildcards.panel == 'wgs' else 'WES',
        tmp_dir = temp(directory("deepvariant")),
    threads:
        int(config['threads'])
    log:
        log_dir = directory('variant/{reference}-{panel}/original/log/{sample}'),
        out = 'variant/{reference}-{panel}/original/log/{sample}.deepvariant.vcf.out',
        err = 'variant/{reference}-{panel}/original/log/{sample}.deepvariant.vcf.err'
    benchmark:
        'variant/{reference}-{panel}/original/log/{sample}.vcf.benchmark',
    conda:
        config['snakelines_dir'] + '/environments/deepvariant.yaml'
    shell:
        """
        dv_make_examples.py \
            --cores {threads} \
            --ref {input.fasta} \
            --sample {wildcards.sample} \
            --reads {input.bam} \
            --examples {params.tmp_dir} \
            --logdir {log.log_dir} \
            --gvcf {params.tmp_dir} \
            --regions {input.bed} \
            1> {log.out} \
            2> {log.err};
        dv_call_variants.py \
            --cores {threads} \
            --outfile {params.tmp_dir}/{wildcards.sample}.tmp \
            --sample {wildcards.sample} \
            --examples {log.log_dir} \
            --model {params.model} \
            1>> {log.out} \
            2>> {log.err};
        dv_postprocess_variants.py \
            --ref {input.fasta} \
            --gvcf_infile {params.tmp_dir}/{wildcards.sample}.gvcf.tfrecord@{threads}.gz \
            --gvcf_outfile {output.gvcf} \
            --infile {params.tmp_dir}/{wildcards.sample}.tmp \
            --outfile {output.vcf} \
            1>> {log.out} \
            2>> {log.err};
        """


rule gatk__prepare_vcf:
    """
    Adds missing sequence dictionary to VCF header. This job also generates VCF index (.idx).
    :input vcf: Raw VCF from variant caller vardict.
    :input fasta: Reference sequence.
    :output vcf: Fixed VCF.
    :output vcf_index: Fixed VCF index.
    """
    input:
        vcf = 'variant/{reference}-{panel}/original/{sample}.deepvariant.vcf',
        fasta = 'reference/{reference}/{reference}.fa'
    output:
        vcf = 'variant/{reference}-{panel}/original/{sample}.vcf',
        vcf_index = 'variant/{reference}-{panel}/original/{sample}.vcf.idx',
    log:
        out = 'variant/{reference}-{panel}/original/log/{sample}.out',
        err = 'variant/{reference}-{panel}/original/log/{sample}.err',
    conda:
        config['snakelines_dir'] + '/environments/gatk4.yaml'
    shell:
        """
        gatk SelectVariants \
            -V {input.vcf} \
            -R {input.fasta} \
            -O {output.vcf} \
            1>{log.out} \
            2>{log.err}
        """
