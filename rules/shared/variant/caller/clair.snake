include: config['snakelines_dir'] + '/rules/shared/mapping/index/samtools.snake'

rule clair__variant_call_mapped_reads:
    """
    Identify small variants from reads mapped to a reference.
    :input ref: Reference genomic sequences in fasta format
    :input bam: Unordered mapped reads in bam format
    :output bam: Ordered mapped reads according to their location on reference genome
    """
    input:
        bam = 'mapping/{reference}/sorted/{sample}.bam',
        bai = 'mapping/{reference}/sorted/{sample}.bam.bai',
        reffasta = 'reference/{reference}/{reference}.fa',
        reffaidx = 'reference/{reference}/{reference}.fa.fai'
    output:
        vcf = 'variant/{reference}-wgs/{map_type}/{sample}.vcf',
    log:
        err = 'variant/{reference}/{map_type}/log/{sample}.err'
    threads:
        int(config['threads'])
    conda:
        config['snakelines_dir'] + '/enviroments/clair.yaml'
    shell:
        """
        if [ -d variant/tmp ]; then rm -r variant/tmp; fi
        mkdir variant/tmp
        python3 $CLAIR callVarBamParallel \
            --chkpnt_fn ~/Clair/models/ont/model/model \
            --ref_fn {input.reffasta} \
            --bam_fn {input.bam} \
            --includingAllContigs \
            --threshold 0.2 \
            --output_prefix "variant/tmp/a" \
            > command.sh \
            2> {log.err}

        cat command.sh | parallel -j{threads} --will-cite

        #for i in variant/tmp/*.vcf
        #do 
        #    if ! [ -z "$(tail -c 1 "$i")" ]; then echo "$i"; fi
        #done | grep -f - command.sh | sh 2> {log.err}
        
        vcfcat variant/tmp/*.vcf | bcftools sort > {output.vcf} 2> {log.err}
        rm -r variant/tmp
        """

rule vcfcat__merge_vcf_files:
    """
    Concatente all vcf files into one
    """
    input:
        vcffiles = 'variant/{reference}*.vcf'
    output:
        finalvcf = 'variant/{reference}/snp_and_indel.vcf.gz'
    threads:
        int(config['threads'])
    shell:
        """
        vcfcat {output.vcffiles}*.vcf | bcftools sort | bgziptabix {output.finalvcf}
        """

