include: config['snakelines_dir'] + '/rules/shared/reference/annotation/regions.snake'
include: config['snakelines_dir'] + '/rules/shared/reference/index/fai/samtools.snake'
include: config['snakelines_dir'] + '/rules/shared/reference/index/dict/picard.snake'

rule freebayes_call_germline_variants:
    """
        FreeBayes (Garrison and Marth, 2012)is a popular haplotype-aware, genome-wide variant caller,
        which allows for control over the minimum VAF and the minimum number of alternative-reads.
        It is Suitable caller for mtDNA: https://www.biorxiv.org/content/10.1101/852210v1.full.pdf
        with recommended settings: mapping quality (MQ≥30), and base quality (BQ≥24) filters
    """
    input:
        bam   = 'mapping/{reference}/%s/{sample}.bam' % pipeline.postprocessed_map_type,
        bai   = 'mapping/{reference}/%s/{sample}.bam.bai' % pipeline.postprocessed_map_type,
        bed   = 'reference/{reference}/annotation/{panel}/regions.bed',
        fasta = 'reference/{reference}/{reference}.fa',
        fai   = 'reference/{reference}/{reference}.fa.fai'
    output:
        vcf  = 'variant/{reference}-{panel}/original/{sample}.freebayes.vcf'
    params:
        ploidy = method_config.get('ploidy', 2),
        min_mapping_quality = method_config.get('min_mapping_quality', 1),
        min_base_quality = method_config.get('min_base_quality', 0),
        min_alternate_count = method_config.get('min_alternate_count', 2),
        min_alternate_fraction = method_config.get('min_alternate_fraction', 0.05),
        min_coverage = method_config.get('min_coverage', 0),
        gvcf = '--gvcf --gvcf-dont-use-chunk true' if method_config.get('gvcf', False) else '',
        all_alleles = '--report-all-haplotype-alleles --report-monomorphic' if method_config.get('all_alleles', False) else ''
    threads:
        int(config['threads'])
    log:
        out = 'variant/{reference}-{panel}/original/log/{sample}.freebayes.vcf.out',
        err = 'variant/{reference}-{panel}/original/log/{sample}.freebayes.vcf.err'
    benchmark:
        'variant/{reference}-{panel}/original/log/{sample}.vcf.benchmark',
    conda:
        config['snakelines_dir'] + '/enviroments/freebayes.yaml'
    shell:
        """
        freebayes \
            --bam {input.bam} \
            --fasta-reference {input.fasta} \
            --targets {input.bed} \
            --ploidy {params.ploidy} \
            --min-mapping-quality {params.min_mapping_quality} \
            --min-base-quality {params.min_base_quality} \
            --min-alternate-count {params.min_alternate_count} \
            --min-alternate-fraction {params.min_alternate_fraction} \
            --min-coverage {params.min_coverage} \
            {params.gvcf} \
            {params.all_alleles} \
            --vcf {output.vcf} \
        1> {log.out} \
        2> {log.err}
        """

rule freebayes__variant_call_mapped_reads:
    """
    Identify small variation (SNP and indels) from the mapped reads.
    """
    input:
        bam = 'mapping/{reference}/deduplicated/{sample}.bam',
        bai = 'mapping/{reference}/deduplicated/{sample}.bam.bai',
        ref = 'reference/{reference}/{reference}.fa'
    output:
        vcf = 'variant/{reference}-wgs/original/{sample}.vcf'
    params:
        min_alternate_fraction = config['variant']['min_nonref_allele_freq'],
        min_alternate_count = config['variant']['min_alternate_count'],
        min_coverage = config['variant']['min_coverage'],
        keep_indels = '' if config['variant']['keep_indels'] else '--no-indels'
    conda:
       config['snakelines_dir'] + '/enviroments/freebayes.yaml'
    shell:
        '''
        freebayes \
            --pooled-continuous \
            --fasta-reference {input.ref} \
            --min-coverage {params.min_coverage} \
            --min-alternate-fraction {params.min_alternate_fraction} \
            --report-all-haplotype-alleles \
            --min-alternate-count {params.min_alternate_count} \
            {params.keep_indels} \
            {input.bam} \
        > {output.vcf}
        '''

rule gatk__prepare_vcf:
    """
    Adds missing sequence dictionary to VCF header. This job also generates VCF index (.idx).
    :input vcf: Raw VCF from variant caller vardict.
    :input fasta: Reference sequence.
    :output vcf: Fixed VCF.
    :output vcf_index: Fixed VCF index.
    """
    input:
        vcf = 'variant/{reference}-{panel}/original/{sample}.freebayes.vcf',
        fasta = 'reference/{reference}/{reference}.fa'
    output:
        vcf = 'variant/{reference}-{panel}/original/{sample}.vcf',
        vcf_index = 'variant/{reference}-{panel}/original/{sample}.vcf.idx',
    log:
        out = 'variant/{reference}-{panel}/original/log/{sample}.out',
        err = 'variant/{reference}-{panel}/original/log/{sample}.err',
    conda:
        config['snakelines_dir'] + '/enviroments/gatk4.yaml'
    shell:
        """
        gatk SelectVariants \
            -V {input.vcf} \
            -R {input.fasta} \
            -O {output.vcf} \
            1>{log.out} \
            2>{log.err}
        """

