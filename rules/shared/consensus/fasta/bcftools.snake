include: config['snakelines_dir'] + '/rules/shared/variant/compression/bgzip.snake'
include: config['snakelines_dir'] + '/rules/shared/variant/index/tabix.snake'
include: config['snakelines_dir'] + '/rules/shared/reference/index/fai/samtools.snake'
include: config['snakelines_dir'] + '/rules/shared/mapping/bed/bedtools.snake'

rule bcftools__create_consensus_fasta:
    """
        Create consensus sequence by applying VCF variants to a reference fasta file.
        By default, the program will apply all ALT variants to the reference fasta to obtain the consensus sequence.
        See http://samtools.github.io/bcftools/bcftools.html#consensus
    """
    input:
        vcf      = 'variant/{reference}-{panel}/original/{sample}.vcf.gz',
        tbi      = 'variant/{reference}-{panel}/original/{sample}.vcf.gz.tbi',
        fasta    = 'reference/{reference}/{reference}.fa',
        fai      = 'reference/{reference}/{reference}.fa.fai',
        genome   = 'reference/{reference}/{reference}.genome',
        bedgraph = 'mapping/{reference}/%s/bed/{sample}.bedgraph' % pipeline.postprocessed_map_type
    output:
        fasta = 'consensus/{reference}-{panel}/{sample}.fa',
    log:
        out = 'consensus/{reference}-{panel}/log/{sample}.fa.out',
        err = 'consensus/{reference}-{panel}/log/{sample}.fa.err'
    params:
        mask_lte_coverage = method_config.get('mask_lte_coverage', -1),
        bed = 'consensus/{reference}-{panel}/{sample}.masked.bed',
    conda:
        config['snakelines_dir'] + '/enviroments/create_consensus_fasta.yaml'
    shell:
        """
        mask=''
        if (( {params.mask_lte_coverage} >= 0 )); then
            # coverage value is at column 4 of bedgraph
            complement_regions=`bedtools merge -i <(awk '$4 > {params.mask_lte_coverage}' {input.bedgraph} | cut -f 1-3)`
            bedtools complement -i <(printf \"$complement_regions\") -g {input.genome} > {params.bed}
            mask='--mask {params.bed}'
        fi

        bcftools consensus \
            --fasta-ref {input.fasta} \
            --output {output.fasta} \
            $mask \
            {input.vcf} \
        1> {log.out} \
        2> {log.err}

        sed -i '1s/>.*/>{wildcards.sample}/' {output.fasta}
        """
