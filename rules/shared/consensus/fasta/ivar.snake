rule ivar__create_consensus_fasta:
    """
    Create consensus sequence using samtools and ivar

    Calls 'samtools mpileup' piped into 'ivar consensus'.

    :input bam: mapping output in the final postprocessed stage.
    :input fai: indexed fasta to obtain regions.
    :param count_orphans: True or False (def: False), whether to count anomalous read pairs in variant calling
    :param no_base_alignment_quality: True or False (def: False), disable base alignment quality.
    :param max_depth: Int (def: 8000), limits the number of reads to load in memory per input file. Setting to 0 removes the limit.
    :param min_mapping_quality: Int (def: 0), minimum mapping quality for an alignment to be used.
    :param min_base_quality: Int (def: 13), minimum base quality for a base to be considered. Setting to 0 make the overlapping bases reappear, albeit with 0 quality.
    :param ivar_quality_threshold: Int, (def: 20), minimum quality score threshold to count base.
    :param ivar_frequency_threshold Float, range [0-1] (default: 0), minimum frequency threshold to call consensus.
    :param ivar_min_depth: Int (def: 10), minimum depth to call consensus.
    :output fasta: created consensus by ivar.
    """
    input:
        bam   = 'mapping/{{reference}}/{map_type}/{{sample}}.bam'.format(map_type=pipeline.postprocessed_map_type),
        fai   = 'reference/{reference}/{reference}.fa.fai',
    output:
        fasta = 'consensus/{reference}-{panel}/{sample}.fa'
    params:
        out_prefix = 'consensus/{reference}-{panel}/{sample}',
        count_orphans = '--count-orphans' if method_config.get('count_orphans', False) else '',
        max_depth = method_config.get('max_depth', 8000),
        min_mapping_quality = method_config.get('min_mapping_quality', 0),
        min_base_quality = method_config.get('min_base_quality', 13),
        no_base_alignment_quality = '--no-BAQ' if method_config.get('no_base_alignment_quality', False) else '',
        ivar_quality_threshold = method_config.get('ivar_quality_threshold', 20),
        ivar_frequency_threshold = method_config.get('ivar_frequency_threshold', 0),
        ivar_min_depth = method_config.get('ivar_min_depth', 10),
    log:
        out = 'consensus/{reference}-{panel}/log/{sample}.fa.out',
        err = 'consensus/{reference}-{panel}/log/{sample}.fa.err'
    conda:
        config['snakelines_dir'] + '/environments/ivar_consensus.yaml'
    shell:
        '''
        for REF in `cut -f 1 {input.fai}`; do \
            samtools mpileup \
                --region $REF \
                {params.no_base_alignment_quality} \
                -aa \
                {params.count_orphans} \
                --max-depth {params.max_depth} \
                --min-MQ {params.min_mapping_quality} \
                --min-BQ {params.min_base_quality} \
                {input.bam} \
                2> {log.err} \
            | ivar consensus \
                -p {params.out_prefix}_$REF \
                -i {wildcards.sample}_$REF \
                -q {params.ivar_quality_threshold} \
                -t {params.ivar_frequency_threshold} \
                -m {params.ivar_min_depth} \
                1> {log.out} \
                2>> {log.err}; \
            OUT_FILE="{params.out_prefix}_$REF".fa; \
            QUAL_FILE="{params.out_prefix}_$REF".qual.txt; \
            cat $OUT_FILE \
                >> {output.fasta}; \
            rm $OUT_FILE; \
            rm $QUAL_FILE; \
        done;
        '''
