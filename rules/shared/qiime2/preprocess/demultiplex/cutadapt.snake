rule qiime2__cutadapt_trim:
    """
    Cut adapters from reads (paired or single-end). Calls 'qiime cutadapt trim-paired' or 'qiime cutadapt trim-single'
    :input demux_sequences: Imported demultiplexed sequences
    :output trimmed_sequences: Sequences with cut adapters using qiime cutadapt
    :params sequen: str, type of sequencing, either single-end or paired-end, derived from main config
    :params minlen: int, required min length of sequences to be kept after cutting adapters
    :params maxerr: float 0-1, maximum allowed error rate of sequence to be kept
    """
    input:
        demux_sequences = 'reads/import/{reference}.qza'
    output:
        trimmed_sequences = 'reads/preprocess/demultiplex/{reference}.qza'
    log:
        out = 'reads/preprocess/demultiplex/log/{reference}.log',
        err = 'reads/preprocess/demultiplex/log/{reference}.err'
    threads:
        int(config['threads'])
    params:
        sequen = config['sequencing'].split("_end")[0],
        minlen = method_config.get('minlen', 1),
        maxerr = method_config.get('max_error_rate', 0.1) 
    conda:
        config['snakelines_dir'] + '/enviroments/qiime2.yaml'
    shell:
        '''
        qiime cutadapt trim-{params.sequen} \
            --i-demultiplexed-sequences {input.demux_sequences} \
            --o-trimmed-sequences {output.trimmed_sequences} \
            --p-cores {threads} \
            --p-minimum-length {params.minlen} \
            --p-error-rate {params.maxerr}
        '''

#to je asi vhodne len pri subsample
rule qiime2__cutadapt_tabulate:
    """
    Summarize counts per sample for all samples, and visualize using `n` randomly selected sequences.
    Calls 'qiime demux summarize'
    :input demux_seqs: demultiplexed sequences with cut adapters
    :output visualization: artifact of interactive positional quality plots
    """
    input:
        demux_seqs = 'reads/preprocess/demultiplex/{reference}.qza'
    output:
        qzv = 'reads/preprocess/demultiplex/{reference}_quality.qzv'
    conda:
        config['snakelines_dir'] + '/enviroments/qiime2.yaml'
    shell:
        '''    
        qiime demux summarize \
            --i-data {input.demux_seqs} \
            --o-visualization {output.qzv}
        '''