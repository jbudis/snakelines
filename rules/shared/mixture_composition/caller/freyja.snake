import os

def prepare_arg(base:str, arg:str, file:str) -> str:
    """Prepare optional argument for freyja"""
    if base is None:
        return ''
    path = os.path.join(base, file)
    return f'{arg} {path}'

rule samtools_mpileup_depth:
    '''
    Builds .depth file
    '''
    input:
        bam   = 'mapping/{{reference}}/{map_type}/{{sample}}.bam'.format(map_type=pipeline.postprocessed_map_type),
        fasta = 'reference/{reference}/{reference}.fa',
    output:
        depth   = 'mapping/{reference}-{panel}/freyja/{sample}_freyja.depth'
    conda:
        config['snakelines_dir'] + '/enviroments/samtools.yaml'
    shell:
        '''
        samtools mpileup -aa -A -d 600000 -Q 20 -q 0 -B -f {input.fasta} {input.bam} | cut -f1-4 > {output.depth}
        '''

rule mixture_composition_freyja_variants:
    '''
    Call variants
    '''
    input:
        fasta = 'reference/{reference}/{reference}.fa',
        fai   = 'reference/{reference}/{reference}.fa.fai',
        bam   = 'mapping/{{reference}}/{map_type}/{{sample}}.bam'.format(map_type=pipeline.postprocessed_map_type),
        depth = 'mapping/{reference}-{panel}/freyja/{sample}_freyja.depth',
    output:
        tsv     = 'consensus/{reference}-{panel}/{sample}_freyja.tsv',
    log:
        out = 'consensus/{reference}-{panel}/log/{sample}.freyja_variants.log',
        err = 'consensus/{reference}-{panel}/log/{sample}.freyja_variants.err'
    conda:
        config['snakelines_dir'] + '/enviroments/freyja.yaml'
    shell:
        '''
        freyja variants \
            {input.bam} \
            --variants {output.tsv} \
            --depths {input.depth} \
            --ref {input.fasta} \
            1> {log.out} \
            2> {log.err};
        '''

rule mixture_composition_freyja_demix:
    '''
    Demix variants using freyja method
    '''
    input:
        depth = 'mapping/{reference}-{panel}/freyja/{sample}_freyja.depth',
        tsv     = 'consensus/{reference}-{panel}/{sample}_freyja.tsv',
    output:
        demix  = 'consensus/{reference}-{panel}/{sample}_freyja.demix',
    log:
        out = 'consensus/{reference}-{panel}/log/{sample}.freyja_demix.log',
        err = 'consensus/{reference}-{panel}/log/{sample}.freyja_demix.err'
    params:
        lineages = prepare_arg(method_config.get('updating_dir',None),'--meta','curated_lineages.json'),
        barcodes = prepare_arg(method_config.get('updating_dir',None),'--barcodes','usher_barcodes.csv'),
    conda:
        config['snakelines_dir'] + '/enviroments/freyja.yaml'
    shell:
        '''
        freyja demix \
            {input.tsv} \
            {input.depth} \
            --output {output.demix} \
            {params.lineages} \
            {params.barcodes} \
            1> {log.out} \
            2> {log.err};
        '''

rule mixture_composition_freyja:
    '''
    Postprocess freyja output
    '''
    input:
        demix   = 'consensus/{reference}-{panel}/{sample}_freyja.demix',
    output:
        composition_tsv  = 'consensus/{reference}-{panel}/{sample}.mixture_comp.csv'
    log:
        out = 'consensus/{reference}-{panel}/log/{sample}.mixture_comp.log',
        err = 'consensus/{reference}-{panel}/log/{sample}.mixture_comp.err'
    params:
        script_tsv = srcdir("freyja_scripts/convert_demixed_to_tsv.py"),
    conda:
        config['snakelines_dir'] + '/enviroments/freyja.yaml'
    shell:
        '''
        python3 \
            {params.script_tsv} \
            {input.demix} \
            {wildcards.sample} \
            {output.composition_tsv} \
            1> {log.out} \
            2> {log.err};
        '''
