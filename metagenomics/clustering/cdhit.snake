import re
import pandas as pd
from collections import OrderedDict
from Bio import SeqIO

rule cdhit_cluster_to_otus:
    input:
        fa='{path}/{genome}.fa'
    output:
        otus='{path}/{genome}.otu{identity, \d+}.fa',
        clusters='{path}/{genome}.otu{identity, \d+}.fa.clstr'
    params:
        otus='{path}/{genome}.otu{identity, \d+}.tmp',
        clusters='{path}/{genome}.otu{identity, \d+}.tmp.clstr'
    threads:
        int(config['threads'])
    run:
        cdhit = '''
            cd-hit \
                -i {input.fa} \
                -o {params.otus} \
                -G 0.{wildcards.identity} \
                -T {threads} \
                -M 120000 \
                -aS 0.9 \
                -g 1
        '''.format(input=input, output=output, wildcards=wildcards, threads=threads, params=params)

        os.system(cdhit)
        with open(params.otus) as infa, open(output.otus, 'w') as outfa:
            for i, otu in enumerate(SeqIO.parse(infa, 'fasta')):
                otu.id = 'OTU{}'.format(i+1)
                otu.description = ''
                SeqIO.write(otu, outfa, 'fasta')

        os.rename(params.clusters, output.clusters)
        os.remove(params.otus)

rule cdhit_summarise_otu_counts:
    input:
        clusters='{path}/{genome}.otu{identity}.fa.clstr',
        counts = '{path}/{genome}.counts.tsv'
    output:
        counts='{path}/{genome}.otu{identity}.counts.tsv',
        ratios='{path}/{genome}.otu{identity}.ratios.tsv'
    run:
        contig_counts = pd.read_csv(input.counts, sep='\t', index_col=0)

        # Parse contigs that belongs to each OTU
        otus = OrderedDict()
        otu_id, otu_contigs = 0, None
        with open(input.clusters) as cluster_file:
            for line in cluster_file:
                if line.startswith('>'):
                    otu_id += 1
                    otu_name = 'OTU{otu_id}'.format(otu_id=otu_id)
                    otu_contigs = []
                    otus[otu_name] = otu_contigs
                    continue

                contig_id = re.search(r'>.+\.\.\.', line).group()[1:-3]
                otu_contigs.append(contig_id)

        # Sum contig counts that belongs to the same OTU
        otu_counts = pd.DataFrame(index=contig_counts.index)
        for otu_name, otu_contigs in otus.items():
            otu_counts[otu_name] = contig_counts[otu_contigs].sum(axis=1)

        # Calculate percentual proportions of each OTU at sample
        otu_ratios = (otu_counts.transpose() / otu_counts.transpose().sum(axis=0)).transpose()

        # Store counts and ratios
        otu_counts.to_csv(output.counts, sep='\t', index=True)
        otu_ratios.to_csv(output.ratios, sep='\t', index=True)