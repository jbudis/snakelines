import pandas as pd

shorten_species_names = 'tax_counts' in config and 'shorten_species_names' in config['tax_counts'] \
                         and config['tax_counts']['shorten_species_names']

def shorten_species(tax):
    subtaxes = tax.split(';')
    species_parts = subtaxes[-1].split(' ')
    if len(species_parts) <= 2:
        return tax
    else:
        subtaxes[-1] = ' '.join(species_parts[:2])
        return ';'.join(subtaxes)


def group_otus(input, output, params):
        counts = pd.read_csv(input.counts, sep='\t', index_col=0)
        taxes = {}
        for line in open(input.taxes):
            ref, tax = line.strip().split('\t')
            taxes[ref] = tax
            if ' ' in ref:
                taxes[ref[:ref.find(' ')]] = tax

        tax_table = pd.DataFrame(index=counts.index)
        for otu in counts.columns:
            otu_tax = taxes[otu]
            if shorten_species_names:
                otu_tax = shorten_species(otu_tax)
            if otu_tax in tax_table:
                tax_table[otu_tax] += counts[otu]
            else:
                tax_table[otu_tax] = counts[otu]

        tax_table.to_csv(output.counts, sep='\t')

rule custom_group_otus_with_same_taxonomy:
    input:
        counts = '{path}/{otus}.{count_type}.tsv',
        taxes = '{path}/{otus}.tax'
    output:
        counts = '{path}/{otus}.{count_type, counts|ratios}.tax.tsv'
    run:
        group_otus(input, output, params)

rule custom_group_mappings_with_same_taxonomy:
    input:
        counts = '{mapper}/{reference}/counts/mapping.{count_type}.tsv',
        taxes = 'reference/{reference}/{reference}.tax'
    output:
        counts = '{mapper}/{reference}/counts/mapping.{count_type}.tax.tsv'
    run:
        group_otus(input, output, params)

ruleorder: custom_group_mappings_with_same_taxonomy > custom_group_otus_with_same_taxonomy