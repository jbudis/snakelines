import pandas as pd
import numpy as np
import skbio
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA

rule skbio_calculate_unifrac:
    input:
        counts = '{path}/assembly.counts.tsv',
        tree = '{path}/alignment/{aligner}/assembly.aln.treefile'
    output:
        unweighted_tsv = '{path}/alignment/{aligner}/{genome}.ufrac.tsv',
        weighted_tsv = '{path}/alignment/{aligner}/{genome}.wfrac.tsv',
        unweighted_img = '{path}/alignment/{aligner}/{genome}.ufrac.png',
        weighted_img = '{path}/alignment/{aligner}/{genome}.wfrac.png',
        unweighted_pca = '{path}/alignment/{aligner}/{genome}.ufrac.pca.png',
        weighted_pca = '{path}/alignment/{aligner}/{genome}.wfrac.pca.png'
    run:
        table = pd.read_csv(input.counts, sep='\t', index_col=0)
        otus = list(table.columns)
        sids = list(table.index)
        counts = np.round(table.as_matrix()).astype(int)

        tree = skbio.TreeNode.read(input.tree).root_at_midpoint()

        def beta_diversity(method, out_tsv, out_img, out_pca):
            # Calculate distances between samples
            diversities = skbio.diversity.beta_diversity(method, counts, sids,
                                                          tree=tree,
                                                          otu_ids=[otu.replace('_', ' ') for otu in otus])

            # Store into table
            diversities.to_data_frame().to_csv(out_tsv, sep='\t')

            # Store heatmap
            diversities.plot()
            plt.savefig(out_img)

            # Store PCA plot
            pca = PCA(n_components=2)
            distances = diversities.data
            pca.fit(distances)
            coords = pca.transform(distances)
            plt.figure()
            for i, (sid, (x,y)) in enumerate(zip(sids, coords)):
                plt.scatter(x, y, s=100, label=sid,
                            c=plt.cm.spectral(i*20), edgecolor='k')
            plt.legend()
            plt.savefig(out_pca)


        beta_diversity('weighted_unifrac', output.weighted_tsv, output.weighted_img, output.weighted_pca)
        beta_diversity('unweighted_unifrac', output.unweighted_tsv, output.unweighted_img, output.unweighted_pca)