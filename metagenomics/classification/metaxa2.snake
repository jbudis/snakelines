include: config['snake_dir'] + '/preprocess/conversion/unzip.snake'

DEFAULT_CONFIDENCE = 0.5

read_type  = config['metaxa2']['read_type']
confidence = config['metaxa2']['confidence'] if 'confidence' in config['metaxa2'] else DEFAULT_CONFIDENCE
confidence = int(100*float(confidence))

rule metaxa2_classification:
    input:
        r1 = 'reads/%s/{sample}_R1.fastq.gz' % read_type,
        r2 = 'reads/%s/{sample}_R2.fastq.gz' % read_type
    output:
        taxonomy = 'metaxa2/{gene,ssu|lsu}/classification/{sample}/{sample}.taxonomy.txt'
    params:
        outpref = 'metaxa2/{gene}/classification/{sample}/{sample}',
        confidence = confidence
    log:
        'metaxa2/{gene}/classification/{sample}/log/metaxa2.log'
    threads:
        int(config['threads'])
    shell:
        '''
        /usr/local/tools/metaxa-2.1.3/metaxa2 \
            -1 {input.r1} \
            -2 {input.r2} \
            -o {params.outpref} \
            -g {wildcards.gene} \
            -R {params.confidence} \
            --plus T \
            --cpu {threads} \
        > {log}
        '''

rule metaxa2_create_index:
    input:
        fasta = 'reference/{reference}/{reference}.fa',
        tax = 'reference/{reference}/{reference}.tax'
    output:
        blast = 'reference/{reference}/metaxa2_index/blast.nhr',
        hmm = 'reference/{reference}/metaxa2_index/HMMS/E.hmm'
    params:
        index_dir = 'reference/{reference}/metaxa2_index'
    threads:
        int(config['threads'])
    log:
        out = 'reference/{reference}/metaxa2_index/log/db.log',
        err = 'reference/{reference}/metaxa2_index/log/db.err'
    shell:
        '''
        metaxa2_dbb \
            -i {input.fasta} \
            -o {params.index_dir} \
            -g {reference} \
            -t {input.tax} \
            --auto_rep T \
            --cpu {threads} \
            --plus T \
         > {log.out} \
        2> {log.err}
        '''


rule metaxa2_summarize_classification:
    input:
        taxonomy = 'metaxa2/{gene}/classification/{sample}/{sample}.taxonomy.txt'
    output:
        summary = 'metaxa2/{gene}/classification/{sample}/{sample}.level_7.txt'
    params:
        outpref = 'metaxa2/{gene}/classification/{sample}/{sample}'
    log:
        'metaxa2/{gene}/classification/{sample}/log/metaxa2_ttt.log'
    shell:
        '''
        metaxa2_ttt \
                -i {input.taxonomy} \
                -o {params.outpref} \
        > {log}
        '''

rule metaxa2_prepare_for_krona:
    input:
        'metaxa2/{gene}/classification/{sample}/{sample}.level_7.txt'
    output:
        'metaxa2/{gene}/report/krona/individual/{sample}.krn'
    shell:
        '''
        cat \
            {input} \
        | sed \
            's/ /@/g' \
        | awk \
            '{{print $2 "\t" $1}}' \
        | sed \
            's/@/ /g' \
        | sed \
            's/;/\t/g' \
        | sed \
            's/Unclassified //g' \
        > {output}
        '''

rule metaxa2_krona_report:
    input:
        'metaxa2/{gene}/report/krona/individual/{sample}.krn'
    output:
        'metaxa2/{gene}/report/krona/individual/{sample}.html'
    log:
        'metaxa2/{gene}/report/krona/individual/log/{sample}.krona'
    shell:
        '''
        ktImportText \
            -o {output} \
            {input} \
        > {log}
        '''
