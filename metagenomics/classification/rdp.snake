import pandas as pd

read_type  = config['rdp']['read_type']

rule rdp_classification:
    input:
        'reads/%s/{sample}_RM.fastq.gz' % read_type
    output:
        readtax = 'rdp/{gene,ssu|lsu|its_unite|its_warcup}/classification/{sample}/readtax.tsv',
        taxonomy = 'rdp/{gene,ssu|lsu|its_unite|its_warcup}/classification/{sample}/taxonomy.tsv'
    params:
        confidence = config['rdp']['confidence']
    shell:
        '''
        declare -A GENES=( [ssu]=16srrna [lsu]=fungallsu [its_unite]=fungalits_unite [its_warcup]=fungalits_warcup)
        GENE=${{GENES[{wildcards.gene}]}}

        rdpclassifier classify \
            --format fixrank \
            --gene $GENE \
            --conf {params.confidence} \
            --hier_outfile {output.taxonomy} \
            --outputFile {output.readtax} \
            {input}
        '''

rule prepare_for_krona:
    input:
        taxonomy = 'rdp/{gene}/classification/{sample}/taxonomy.tsv'
    output:
        krona = 'rdp/{gene}/report/krona/individual/{sample}.krn'
    run:
        TAX_RANKS = ['domain', 'phylum', 'class', 'subclass', 'order', 'suborder', 'family', 'genus']

        # Load RDP classifier read counts per taxon
        rdp = pd.read_csv(input.taxonomy, sep='\t', index_col=0)
        rdp.columns = ['lineage', 'name', 'rank', 'readcount']
        rdp = rdp[~pd.isnull(rdp['rank'])]
        rdp = rdp[rdp.name != 'Root']

        # Transform RDP tax into more readable syntax
        def parse_tax(code):
            items = code.split(';')[:-1]
            items = [item.strip().strip('"') for item in items]
            item_dict = {rank: taxname for rank, taxname in zip(items[1::2], items[0::2])}

            tax = ''
            for rank in TAX_RANKS:
                rank_tax = item_dict.get(rank, '')
                tax = '%s;%s' % (tax, rank_tax)
            tax = tax.strip(';')
            return tax

        rdp['tax'] = rdp.lineage.apply(parse_tax)
        rdp.sort_values(by='tax', inplace=True)

        # Calculate read counts per taxon
        krona = rdp[['tax', 'readcount']].copy()

        krona['taxlevel'] = krona.tax.apply(lambda x: x.count(';') + bool(len(x)))
        for rowid, row in krona.iterrows():
            subtaxes = krona[krona.tax.str.contains('^%s;+[^;]+$' % row.tax, regex=True)]
            krona.set_value(rowid, 'readcount', row.readcount - subtaxes.readcount.sum())

        # Store results into Krona ready file
        with open(output.krona, 'w') as out:
            for _, row in krona.iterrows():
                out.write('%d\t%s\n' % (row.readcount, row.tax.replace(';', '\t')))