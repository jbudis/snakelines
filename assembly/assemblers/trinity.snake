read_type = config['trinity']['read_type']

def fastas_in_design(wildcards):
    design = 'description/design/{design}.tsv'.format(design=wildcards.design)
    sids = [line.split('\t')[1] for line in open(design)]
    return expand('reads/{read_type}/{sample}_R{orientation}.fastq.gz',
                   read_type=read_type, sample=sids, orientation=[1,2])

rule trinity_assemble:
    input:
        fastas = fastas_in_design,
        design = 'description/design/{design}.tsv'
    output:
        fa = 'trinity-{design}/contigs.fa',
        design = 'trinity-{design}/design/{design}.tsv'
    params:
        read_type = config['trinity']['read_type'],
        min_contig_len = config['trinity']['min_contig_len'],
        outdir = 'trinity-{design}',
        fasta = 'trinity-{design}/Trinity.fasta'
    threads:
        int(config['threads'])
    log:
        stdout = 'trinity-{design}/log/analysis.log',
        stderr = 'trinity-{design}/log/analysis.err',
    shell:
        '''
        sed 's/{{read_type}}/{params.read_type}/g' {input.design} > {output.design}

        trinity \
            --seqType fq \
            --samples_file {output.design} \
            --CPU {threads} \
            --max_memory 100G \
            --min_contig_length {params.min_contig_len} \
            --output {params.outdir} \
        > {log.stdout} \
        2> {log.stderr}

        mv {params.fasta} {output.fa}
        '''
