include: config['snake_dir'] + '/preprocess/conversion/gzip.snake'

rule matam_assemble:
    input:
        rc  = 'reads/joined/{sample}_RC.fastq',
        ref = 'reference/{reference}/matam/{reference}_NR{cluster_limit}.clustered.fasta'
    output:
        contigs = 'matam/{reference}_NR{cluster_limit}/{sample}/final_assembly.fa'
    params:
        outdir = 'matam/{reference}_NR{cluster_limit}/{sample}',
        db = 'reference/{reference}/matam/{reference}_NR{cluster_limit}'
    threads:
        int(config['threads'])
    log:
        stdout = 'matam/{reference}_NR{cluster_limit}/{sample}/log/analysis.log',
        stderr = 'matam/{reference}_NR{cluster_limit}/{sample}/log/analysis.err',
    shell:
        '''
        matam_assembly \
            --input_fastx {input.rc} \
            --ref_db {params.db} \
            --out_dir {params.outdir} \
            --cpu {threads} \
            --max_memory 120000 \
         > {log.stdout} \
        2> {log.stderr} \
        '''

rule matam_prepare_reference:
    input:
        fa = 'reference/{reference}/{reference}.fa'
    output:
        ref = 'reference/{reference}/matam/{reference}_NR{cluster_limit}.clustered.fasta'
    params:
        db_dir = 'reference/{reference}/matam'
    threads:
        int(config['threads'])
    shell:
        '''
        mkdir -p {params.db_dir}

        matam_db_preprocessing \
            --input_ref {input.fa} \
            --db_dir {params.db_dir} \
            --cpu {threads} \
            --max_memory 120000 \
            --clustering_id_threshold 0.{wildcards.cluster_limit}
        '''